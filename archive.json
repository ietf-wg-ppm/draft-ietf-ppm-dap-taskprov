{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-11-24T01:10:24.818054+00:00",
  "repo": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "draft-01",
      "description": "",
      "color": "BE3365"
    },
    {
      "name": "on-hold",
      "description": "on-hold because it depends on other drafts",
      "color": "d4c5f9"
    },
    {
      "name": "wire breaking",
      "description": "",
      "color": "C7544A"
    },
    {
      "name": "draft-wang-ppm-dap-taskprov-07",
      "description": "",
      "color": "3A5517"
    },
    {
      "name": "interim-2024-10-24",
      "description": "",
      "color": "E0C934"
    },
    {
      "name": "pre-WGLC",
      "description": "",
      "color": "761971"
    },
    {
      "name": "editorial",
      "description": "",
      "color": "3D9B39"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "I_kwDOH4FR585RsqjC",
      "title": "Define \"task author\"",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/3",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This section should define the term \"task author\" (introduced by this draft) and elaborate on its role. We can do so in follow-up PR.\r\n\r\n_Originally posted by @cjpatton in https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/2#discussion_r969014987_",
      "createdAt": "2022-09-12T23:52:03Z",
      "updatedAt": "2022-09-29T14:56:06Z",
      "closedAt": "2022-09-29T14:56:06Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #9.",
          "createdAt": "2022-09-29T14:56:06Z",
          "updatedAt": "2022-09-29T14:56:06Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOH4FR585Rsqqa",
      "title": "Flesh out VDAF verificaiton key derivation",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/4",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Since we're using SHA2 for the task ID, we might as well use HKDF-SHA2-Expand for deriving the verification key.",
      "createdAt": "2022-09-12T23:52:56Z",
      "updatedAt": "2022-10-05T22:30:04Z",
      "closedAt": "2022-10-05T22:30:04Z",
      "comments": []
    },
    {
      "number": 5,
      "id": "I_kwDOH4FR585R2fU7",
      "title": "Upgrade to DAP-02",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/5",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "This draft isn't out yet, so we'll have to update this later :)\r\n\r\n_Originally posted by @cjpatton in https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/2#discussion_r971020617_",
      "createdAt": "2022-09-14T16:02:23Z",
      "updatedAt": "2022-09-29T14:55:40Z",
      "closedAt": "2022-09-29T14:55:39Z",
      "comments": []
    },
    {
      "number": 6,
      "id": "I_kwDOH4FR585R3PXm",
      "title": "Consider renaming leader_url and helper_url",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/6",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Deployments may end up putting place holders here or doing something else.",
      "createdAt": "2022-09-14T18:46:28Z",
      "updatedAt": "2023-10-16T15:23:35Z",
      "closedAt": "2023-10-16T15:23:35Z",
      "comments": [
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "@cjpatton can we close this one? I don't see leader_url/helper_url in the spec anymore",
          "createdAt": "2023-10-11T19:20:30Z",
          "updatedAt": "2023-10-11T19:20:30Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually we need to align these with DAP-07: https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/44 should close this.",
          "createdAt": "2023-10-13T19:59:37Z",
          "updatedAt": "2023-10-13T19:59:37Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOH4FR585SKM4y",
      "title": "Editorial: Use \"_\" isntead of \"-\"",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/8",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "As of https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/pull/346, DAP uses \"_\".",
      "createdAt": "2022-09-19T19:11:34Z",
      "updatedAt": "2022-09-29T14:55:32Z",
      "closedAt": "2022-09-29T14:55:32Z",
      "comments": []
    },
    {
      "number": 10,
      "id": "I_kwDOH4FR585SaWKQ",
      "title": "List contributors in alphabetical order",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/10",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "agree with alphabetizing\r\n\r\n_Originally posted by @wangshan in https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/9#discussion_r976660855_",
      "createdAt": "2022-09-22T15:27:53Z",
      "updatedAt": "2022-09-29T14:55:52Z",
      "closedAt": "2022-09-29T14:55:52Z",
      "comments": []
    },
    {
      "number": 11,
      "id": "I_kwDOH4FR585SqYz_",
      "title": "Advise deployments to support a global HPKE config if in-band task provisioning is supported",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/11",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "If a deployment supports in-band task provisioning, then clients should not query `/hpke_config` with a specified `task_id`. The reason is:\r\n\r\n1. Aggregators need the first client report for a particular TaskID, in order for the task to be configured.\r\n2. Clients need the HPKE config to submit reports. If `task_id` parameter is included when clients query `/hpke_config` endpoint, the Aggregator may not know that TaskID yet, because it has not received any report for that.\r\n\r\nOne way is to advise deployment to support a global HPKE config, and also advise clients to not pass `task_id` to `/hpke_config` endpoint. The other way is to create the HPKE config on the fly for unseen task ID in `/hpke_config`.",
      "createdAt": "2022-09-26T23:06:24Z",
      "updatedAt": "2022-10-12T18:08:33Z",
      "closedAt": "2022-10-12T18:08:33Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Yup \ud83d\udc4d ",
          "createdAt": "2022-09-27T15:17:34Z",
          "updatedAt": "2022-09-27T15:17:34Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@junyechen1996 we just merged #9  so this would be a good time for text",
          "createdAt": "2022-09-28T19:26:23Z",
          "updatedAt": "2022-09-28T19:26:23Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/21",
          "createdAt": "2022-10-12T18:08:33Z",
          "updatedAt": "2022-10-12T18:08:33Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOH4FR585SufbV",
      "title": "Consider adding task start time in the task config",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/12",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "        for case1, isn't the task_expiration sufficient? I'm not convinced a start time is the solution but I'm curious how this start time looks like, perhaps we can keep the current PR text and create another PR to address this?\r\n\r\n_Originally posted by @wangshan in https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/9#discussion_r981301881_\r\n      ",
      "createdAt": "2022-09-27T15:02:49Z",
      "updatedAt": "2022-10-05T02:39:12Z",
      "closedAt": "2022-10-05T02:39:12Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@wangshan and I disussed this offline: The reason one wants to know the task lifetime is to provision storage and to prevent clients' measurements from being over exposed over time. In both cases it's sufficient to use the time at which the task was \"opted-in\" to.\r\n\r\nAdd this to  considerations.",
          "createdAt": "2022-09-28T19:16:32Z",
          "updatedAt": "2022-09-28T19:16:32Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "I started thinking about what to write here, and I came to the conclusion that there's not much to say here. We already say explicitly that party entities MAY opt out if they decide the task will live too long.",
          "createdAt": "2022-10-05T02:39:12Z",
          "updatedAt": "2022-10-05T02:39:12Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOH4FR585Sukyv",
      "title": "Clean up a security consideration",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/13",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "        Yes, in the core protocol, client has nothing to lie about task provision, since task has been provisioned before client knows about it. I think the main point is malicious client who wants to send fake extension data will never be mixed with clients that have legitimate task configurations.\r\n\r\n_Originally posted by @wangshan in https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/9#discussion_r980545492_\r\n      ",
      "createdAt": "2022-09-27T15:16:38Z",
      "updatedAt": "2022-10-05T22:29:36Z",
      "closedAt": "2022-10-05T22:29:36Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOH4FR585UfH-a",
      "title": "Decoding unrecognized message variants",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/23",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "The following messages have contents for which decoding depends on an `enum`:\r\n- VdafConfig (need to know the VdafType in order to decode the rest of the message)\r\n- DpConfig (need to know the DpMechanism in order to decode the rest of the message)\r\n- QueryConfig (need to know the QueryType in order to decode everything after min_batch_size)\r\n\r\nWhat do we do if we get a variant we don't recognize? How do we decode the rest of the message? The answer is we can't, since we don't know how many more bytes to consume. All we can do in taskprov-00 is abort with \"unrecgonizedMessage\", since we don't know how to parse.\r\n\r\nQuestion 1: Is this the intended behavior? Or would it be better \"opt-out\" by aborting with \"invalidTask\"?\r\n\r\nRegardless of the answer for taskprov-00, I think for the next version (taskprov-01) we ought to make sure messages can always be decoded, regardless of whether we know how to handle the parameters. The easiest way to do this would be to add a length prefix so that the contents can be handled as opaque blobs. This might look something like this (I'll have to double check if this is valid syntax; a similar situation arises in the TLS 1.3 record layer):\r\n\r\n```\r\nstruct {\r\n       DpConfig dp_config;\r\n       VdafType vdaf_type;\r\n+      uint16_t vdaf_param_len;\r\n       select (VdafConfig.vdaf_type) {\r\n           case prio3_aes128_count: Empty;\r\n           case prio3_aes128_sum: uint8; /* bit length of the summand */\r\n           case prio3_aes128_histogram: uint64<8..2^24-8>; /* buckets */\r\n           case poplar1_aes128: uint16; /* bit length of input string */\r\n+          default: opaque[VdafConfig.vdaf_param_len];\r\n       }\r\n   } VdafConfig;\r\n```\r\n\r\nThis came up while reviewing changes for Daphne: https://github.com/cloudflare/daphne/pull/148#discussion_r1001182181.",
      "createdAt": "2022-10-20T23:09:56Z",
      "updatedAt": "2023-10-24T18:07:53Z",
      "closedAt": "2023-10-18T22:45:11Z",
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "Won't this problem also exist for DAP as well, e.g. enums like `QueryType` and `PrepareStepResult` are needed to decode the rest of the messages? Is the concern that there is no text to recommend what kind of error an aggregator should abort with?\r\n\r\nIn DAP, I don't seem to find any recommendation for `unrecognizedMessage` when an enum value is an unknown variant. Could you point me to those if there is any?",
          "createdAt": "2022-10-20T23:25:22Z",
          "updatedAt": "2022-10-20T23:25:22Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Fair point, but I think it's more of a problem here than for core DAP:\r\n- (defined in DAP) PrepareStepResult is really quite core DAP, so we don't expect variants to be defined outside of DAP. The spec should say unrecognizedMessage on unknown variant (probably a good idea to make this explicit).\r\n- (defined in DAP) QueryType: I guess I can variants being defined outside the core protocol, but it seems somewhat unlikely, given how invasive new query types might be.\r\n- (defined here) DpMechanism: I'm not sure, but I suspect we'll have a few variants of this. Ideally they would all be defined in this spec?\r\n- (defined here) VdafType: We expect to have lots of variants of this, and I don't expect that all variants in the wild will be defined here.",
          "createdAt": "2022-10-20T23:38:26Z",
          "updatedAt": "2022-10-20T23:38:26Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "I see, so I guess the concern is this draft doesn't have a clear guidance on what error each entity should throw when encountering an unknown enum.\r\n\r\nRegarding `DpMechanism`, it has implications on how DP noise is added on each entity (client or aggregator), we still need to define this better, but an entity in a deployment may not support all DP mechanisms, so it seems like it should opt out of the task if it cannot support a particular DP mechanism?\r\nRegarding `VdafType`, an entity may not know about all the VDAFs either, so it seems like it should opt out of the task as well?",
          "createdAt": "2022-10-21T18:00:55Z",
          "updatedAt": "2022-10-21T18:00:55Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": " \r\n> Regarding `DpMechanism`, it has implications on how DP noise is added on each entity (client or aggregator), we still need to define this better, but an entity in a deployment may not support all DP mechanisms, so it seems like it should opt out of the task if it cannot support a particular DP mechanism?\r\n\r\nI agree.\r\n\r\n> Regarding `VdafType`, an entity may not know about all the VDAFs either, so it seems like it should opt out of the task as well?\r\n\r\nYes I think so.\r\n\r\nIn both cases, in taskprov-00 we'll have to abort with \"unrecog nizedMessage\". I think what we actually want is to abort with \"invalidTask\". In particular, in taskprov-01 we should:\r\n\r\n1. Makes sure DpConfig and VdafConfig can always be parsed even if the variant is not recognized.\r\n2. Say each protocol participant MUST opt-out if they don't recognize DP mechanism or VDAF type\r\n",
          "createdAt": "2022-10-21T19:21:15Z",
          "updatedAt": "2022-10-21T19:21:15Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure about this requirement:\r\n\r\n> Makes sure DpConfig and VdafConfig can always be parsed even if the variant is not recognized.\r\n\r\nWon't DAP face this issue as well? For example, `PrepareStepResult` is an unrecognized enum (helper just sends this back intentionally), the rest of `PrepareStep` can't be parsed.",
          "createdAt": "2022-10-21T19:39:20Z",
          "updatedAt": "2022-10-21T19:39:20Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Again, I think the concern for PrepareStepResult is not comparable because we don't expect new variants of PrepareStep to appear in the wild. ",
          "createdAt": "2022-10-21T20:53:26Z",
          "updatedAt": "2022-10-21T20:53:26Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "I think I see the motivation better after our discussion about an unknown `DpMechanism` in `VdafConfig`... so an aggregator can parse the whole `TaskConfig`, but then decide whether it should opt in or out of the task. For example, even though an aggregator doesn't know what `DpMechanism` that is, it can still run the VDAF (because it may not need the `DpMechanism`), so the aggregator may still opt into the task?",
          "createdAt": "2022-10-22T00:52:39Z",
          "updatedAt": "2022-10-22T00:52:39Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "That's a really good point. If I don't recognize the VDAF, then there is nothing I can do but opt out; but if I don't recognize the DP mechanism, it's possible that I'm actually supposed to ignore it. But how would I know that, unless I know the mechanism?",
          "createdAt": "2022-10-22T01:02:14Z",
          "updatedAt": "2022-10-22T01:02:14Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "> If I don't recognize the VDAF, then there is nothing I can do but opt out;\r\n\r\nCertainly.\r\n\r\n> if I don't recognize the DP mechanism, it's possible that I'm actually supposed to ignore it. But how would I know that, unless I know the mechanism?\r\n\r\nI don't have a clear answer to this to be honest :) because DP is still vaguely defined in the DAP/VDAF context as of today. An unknown `DpMechanism` may not matter to an aggregator when it executes the VDAF, because some VDAFs may choose to only ask clients to add local DP, so there is no need for aggregators to add DP, if minimum batch size is already met. In fact, in Prio2 or Prio3Aes128CountVec, there is no guidance on how central DP is applied yet, so an aggregator has no choice but to ignore `DpMechanism`. A task \"Author\" simply logs the `DpMechanism` for transparency reasons, so clients are aware of what kind of overall DP guarantee they can get by participating in the task.",
          "createdAt": "2022-10-22T01:14:58Z",
          "updatedAt": "2022-10-22T01:19:17Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "I would suspect that, even if the DP mechanism is entirely local to the client, an aggregator may wish to opt-out if it decides the degree of privacy that is provided is too low. Of course, this decision process is beyond the scope of this document. The main thing for this issue, IMO, is to separate \"I don't know how to parse this\" from \"I don't know what to do with this\".",
          "createdAt": "2022-10-22T01:25:31Z",
          "updatedAt": "2022-10-22T01:25:50Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "will address this once https://github.com/wangshan/draft-wang-ppm-differential-privacy/blob/main/draft-wang-ppm-differential-privacy.md is in a good shape.",
          "createdAt": "2023-10-11T19:21:03Z",
          "updatedAt": "2023-10-11T19:21:03Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@wangshan I'd like to fix this before we cut the next draft. It's currently a bit of a headache. I'll propose some text.",
          "createdAt": "2023-10-17T14:58:31Z",
          "updatedAt": "2023-10-17T14:58:31Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "@cjpatton just so I understand, the goal here is to make sure if any struct inside TaskConfig is unrecognised, the aggregator can still parse the rest of TaskConfig and decide what to do?",
          "createdAt": "2023-10-18T13:40:26Z",
          "updatedAt": "2023-10-18T13:40:26Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Precisely!",
          "createdAt": "2023-10-18T21:27:31Z",
          "updatedAt": "2023-10-18T21:27:31Z"
        },
        {
          "author": "suman-ganta",
          "authorAssociation": "NONE",
          "body": "```\r\ndefault: opaque[VdafConfig.vdaf_param_len];\r\n```\r\nThe [RFC](https://datatracker.ietf.org/doc/html/rfc8446#section-3.8) doesn't define the following - a) `default` keyword b) non-literal vector length.\r\nAn alternative is to drop `select` construct from the structure altogether and interpret the opaque byte array at runtime based on value of enum.",
          "createdAt": "2023-10-24T17:30:33Z",
          "updatedAt": "2023-10-24T17:30:33Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Hey @suman-ganta, a comment on an already merged PR is easy to miss. I suggest raising an issue to discuss.",
          "createdAt": "2023-10-24T18:07:52Z",
          "updatedAt": "2023-10-24T18:07:52Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOH4FR585U58y1",
      "title": "DAP Error Addition",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/29",
      "state": "CLOSED",
      "author": "bhalleycf",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is ultimately something for the DAP spec, but as it came up in the context of taskprov we thought we'd discuss it here first.  We added a boolean config variable to control whether or not taskprov was allowed, but there is no good standard DAP error for operation refused / denied / forbidden due to local policy.  Perhaps we can add such an error to the spec?\r\n",
      "createdAt": "2022-10-26T17:55:48Z",
      "updatedAt": "2024-09-25T18:21:42Z",
      "closedAt": "2024-09-25T18:21:42Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "It sounds like you'd like to see an explicit \"I have disabled this extension\" signal? I wonder if this is actually needed, given how the spec currently works.",
          "createdAt": "2023-10-13T20:02:13Z",
          "updatedAt": "2023-10-13T20:02:13Z"
        },
        {
          "author": "tgeoghegan",
          "authorAssociation": "NONE",
          "body": "I think HTTP already gives us some good tools for this case. [HTTP 422 Unprocessable Content](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422) or maybe [415 Unsupported Media Type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/415) appear to have the right semantics. An implementation could then choose to include a problem document in the response body explaining exactly why the request was rejected (such as an unsupported extension). DAP allows for using problem types beyond the ones listed in the specification:\r\n\r\n> [This list is not exhaustive. The server MAY return errors set to a URI other than those defined above.](https://datatracker.ietf.org/doc/html/draft-ietf-ppm-dap-07#section-3.2-4)\r\n\r\nI don't think DAP should define a problem type specifically for unsupported extensions, unless there's some specific action that a client would automatically take in response to such an error. If it's just about providing a sufficiently descriptive errors for operators to notice a problem and do something about it, then HTTP and RFC 9457 problem details are already flexible enough for that without any additional text in DAP.",
          "createdAt": "2023-10-17T14:53:22Z",
          "updatedAt": "2023-10-17T14:53:22Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "[The latest DAP version now covers this case](https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html#section-4.6.2-24):\r\n\r\n> If the Leader's input share contains an unrecognized extension, or if two extensions have the same ExtensionType, then the Leader MAY abort the upload request with error \"invalidMessage\". Note that this behavior is not mandatory because it requires the Leader to decrypt its input share.",
          "createdAt": "2024-09-25T18:21:39Z",
          "updatedAt": "2024-09-25T18:21:39Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOH4FR585isZOG",
      "title": "Aggregators should not have to store tasks",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/31",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I had hoped it would be possible to re-generate the task config on the fly from the long-lived pre-shared key, but this turned out to be somewhat tricky in the implementation of draft-02. In the next draft we should consider what changes would be needed to avoid replicating this data.\r\n\r\nSee https://github.com/cloudflare/daphne/issues/257.",
      "createdAt": "2023-04-05T15:05:05Z",
      "updatedAt": "2023-05-04T15:27:44Z",
      "closedAt": "2023-05-04T15:27:44Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "A couple of observations:\r\n\r\n* The taskprov header should appear in all requests from Leader -> Helper for the aggregation and collection flows.l\r\n* If we re-generate the task config on-the-fly, then there is a chance of opting out of a task that we previously opted into. Should this be permissible in the spec? In practice it should be unlikely.",
          "createdAt": "2023-04-07T18:12:34Z",
          "updatedAt": "2023-04-21T00:38:21Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOH4FR585rhHJ7",
      "title": "New histogram format in VDAF-06",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/33",
      "state": "CLOSED",
      "author": "tholop",
      "authorAssociation": "NONE",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "The latest VDAF draft (version 6) modified the format for Prio3Histogram: https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vdaf-06#name-prio3histogram. To create a new Prio3Histogram we only need to know the number of buckets, and we no longer keep track of a vector of bucket boundaries. Measurements are now the bucket index (e.g. here is Libprio's implementation: https://github.com/divviup/libprio-rs/blob/a52c7d56e05741ae852166fd2cf2c223bc0c732b/src/vdaf/prio3_test.rs#L53). \r\n\r\nThis no longer matches TaskProv's `VdafConfig.vdaf_type`: https://wangshan.github.io/draft-wang-ppm-dap-taskprov/draft-wang-ppm-dap-taskprov.html#section-3-9.",
      "createdAt": "2023-07-13T22:25:45Z",
      "updatedAt": "2023-09-07T15:29:53Z",
      "closedAt": "2023-09-07T15:29:53Z",
      "comments": []
    },
    {
      "number": 34,
      "id": "I_kwDOH4FR585tgf6r",
      "title": "Error type registration",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/34",
      "state": "OPEN",
      "author": "divergentdave",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pre-WGLC"
      ],
      "body": "The document currently suggests that the type `urn:ietf:params:ppm:dap:error:invalidTask` should be used in problem details responses. However, DAP says \"Servers MUST NOT use the DAP URN namespace for errors not listed in the appropriate IANA registry\". Thus, the taskprov document's 'IANA Considerations' section should either add an `invalidTask` entry to the contents of DAP's URN registry, or create a separate namespace of its own.",
      "createdAt": "2023-08-04T19:25:11Z",
      "updatedAt": "2024-10-22T22:55:25Z",
      "closedAt": null,
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "If/when this draft is adopted, I think we could make a case for extending the namespace. (i.e., say \"extensions to DAP MAY extend the namespace\"). In the meantime, I believe you're right.",
          "createdAt": "2023-08-04T19:32:34Z",
          "updatedAt": "2023-08-04T19:32:34Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "@divergentdave @cjpatton please suggest what should I do to fix this. Am I right it blocked by DAP [section 8.3](https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html#section-8.3)?",
          "createdAt": "2023-10-11T21:37:56Z",
          "updatedAt": "2023-10-11T21:37:56Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's hold this issue open until we get to WG call-for-adoption. If we discuss this at IETF 118, then I suggest bringing up the issue then.",
          "createdAt": "2023-10-11T22:01:18Z",
          "updatedAt": "2023-10-11T22:01:18Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Blocked by https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/621",
          "createdAt": "2024-10-18T21:37:08Z",
          "updatedAt": "2024-10-18T21:37:08Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOH4FR585txVwM",
      "title": "Leader cannot usefully set `Retry-After` in collection req responses",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/35",
      "state": "CLOSED",
      "author": "tgeoghegan",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The \"Collect Protocol\" section currently reads:\r\n\r\n> The Collector might issue a collect request for a task provisioned by the Taskprov extension prior to opting in to the task. In this case, the Leader would need to abort the collect request with \"unrecognizedTask\". When it does so, it SHOULD also include a \"Retry-After\" header in its HTTP response indicating the time after which the Collector should retry its request.\r\n\r\nThe collection job creation request will fail until a Client does an upload that contains a `dap-taskprov` header corresponding to the task ID. The Leader has no way to know when a Client will get around to doing that, so there's really nothing useful it can set as the value to the `Retry-After` header.\r\n\r\nIf the intent is to allow Leaders to rate limit Collectors, then I'd argue that is not DAP or taskprov's problem: a DAP Leader is an HTTP server and thus is free to use any rate-limiting mechanism that's composable with HTTP without requiring special permission from the application protocol.",
      "createdAt": "2023-08-08T16:38:28Z",
      "updatedAt": "2023-10-16T15:24:45Z",
      "closedAt": "2023-10-16T15:24:45Z",
      "comments": [
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "@tgeoghegan I think the intention is to allow Leader to tell collector whether the requested task hasn't been created yet (in which case collector should retry), or there is a mismatch between of taskConfig. But I think your point is valid:\r\n\r\n>  a DAP Leader is an HTTP server and thus is free to use any rate-limiting mechanism that's composable with HTTP without requiring special permission from the application protocol.\r\n\r\nWe can either change the `SHOULD` to `MAY`, or remove the retry-after option",
          "createdAt": "2023-09-29T20:50:30Z",
          "updatedAt": "2023-09-29T20:50:30Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd opt for removing the retry-after to simplify the spec.",
          "createdAt": "2023-10-10T22:47:15Z",
          "updatedAt": "2023-10-10T22:47:15Z"
        }
      ]
    },
    {
      "number": 36,
      "id": "I_kwDOH4FR585uTVnE",
      "title": "Update histogram representation for VDAF-06",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/36",
      "state": "CLOSED",
      "author": "tgeoghegan",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Taskprov currently has:\r\n```\r\nstruct {\r\n    DpConfig dp_config;\r\n    VdafType vdaf_type;\r\n    select (VdafConfig.vdaf_type) {\r\n        case prio3_aes128_count: Empty;\r\n        case prio3_aes128_sum: uint8; /* bit length of the summand */\r\n        case prio3_aes128_histogram: uint64<8..2^24-8>; /* buckets */\r\n        case poplar1_aes128: uint16; /* bit length of input string */\r\n    }\r\n} VdafConfig;\r\n```\r\n\r\nIn VDAF-06, rather than taking a list of bucket boundaries, the `Prio3Histogram` VDAF just takes a length, which is the number of buckets.\r\n\r\nAdditionally, all these VDAF names have `aes128` in them, which is also obsolete.",
      "createdAt": "2023-08-14T21:24:36Z",
      "updatedAt": "2023-09-05T21:14:08Z",
      "closedAt": "2023-09-05T21:14:08Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "This mostly duplicates https://github.com/wangshan/draft-wang-ppm-dap-taskprov/issues/33.",
          "createdAt": "2023-08-14T21:27:46Z",
          "updatedAt": "2023-08-14T21:27:46Z"
        },
        {
          "author": "tgeoghegan",
          "authorAssociation": "NONE",
          "body": "Oops, I should have checked for existing issues! Please feel free to close this in favor of #33.",
          "createdAt": "2023-08-14T21:28:20Z",
          "updatedAt": "2023-08-14T21:28:20Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOH4FR585u_V3x",
      "title": "Future changes to VDAF algorithm IDs",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/37",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "I wanted to give you a heads up that we're planning on changing the algorithm ID of Prio3Histogram in a future VDAF draft as part of cfrg/draft-irtf-cfrg-vdaf#284. This will affect the `VdafType` enum in future versions of this document.",
      "createdAt": "2023-08-22T19:47:37Z",
      "updatedAt": "2023-09-07T15:29:53Z",
      "closedAt": "2023-09-07T15:29:53Z",
      "comments": []
    },
    {
      "number": 39,
      "id": "I_kwDOH4FR585w-Ifo",
      "title": "Non-Taskprov Aggregators may have an inconsistent view of task parameters",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/39",
      "state": "CLOSED",
      "author": "divergentdave",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "wangshan"
      ],
      "labels": [],
      "body": "The Security Considerations section currently says:\r\n\r\n> In particular, if the Clients and Aggregators have an inconsistent view of the the task configuration, then aggregation of reports will fail. This is guaranteed by the binding of the task ID (derived from the task configuration) to report shares provided by HPKE encryption.\r\n\r\nThis is not the case if one of the Aggregators doesn't use Taskprov, but instead accepts task parameters (including task ID and VDAF verify key) via some other means. A dishonest Aggregator could read the DAP-Taskprov header, rewrite parts of it, provision the rewritten task in the honest Aggregator using some other means, and then proceed to successfully aggregate reports. This could be addressed by adding a zero-length extension to report shares, as honest Aggregators that don't support Taskprov will reject reports with unknown extensions.\r\n\r\nThis attack scenario may be a little far-fetched, as in practice I think aggregators will advertise if they support Taskprov. Furthermore, I think it will be common for other kinds of DAP deployments to define their own incompatible derivation relationships between the `task_id` and `vdaf_verify_key`. This came up while writing up ietf-wg-ppm/draft-ietf-ppm-dap#500.",
      "createdAt": "2023-09-13T22:13:14Z",
      "updatedAt": "2023-10-16T15:24:10Z",
      "closedAt": "2023-10-16T15:24:10Z",
      "comments": [
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "> A dishonest Aggregator could read the DAP-Taskprov header, rewrite parts of it, provision the rewritten task in the honest Aggregator using some other means, and then proceed to successfully aggregate reports. \r\n\r\nYou are right the attack does exist, we should consider adding extension codepoint to report shares, it's a small cost to pay to resolve this issue (similar to what taskprov-02 did when dap-02 has extension on report level, but with zero length extension data).\r\n\r\nwhat do you think @cjpatton? Can we propose that and make taskprov a proper extension of DAP? ",
          "createdAt": "2023-09-29T20:35:19Z",
          "updatedAt": "2023-09-29T20:35:19Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "(sorry for the late reply, I was busy at a conference last week) I agree this is a valid cross-protocol attack. Let's add a defense for it. Good catch @divergentdave as always.",
          "createdAt": "2023-10-10T22:45:20Z",
          "updatedAt": "2023-10-10T22:45:20Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOH4FR585zayJ9",
      "title": "Align with draft-wang-ppm-differential-privacy",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/41",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "Depending on where the DP draft lands, we may want to rethink `DpMechanism`.",
      "createdAt": "2023-10-10T22:49:52Z",
      "updatedAt": "2024-09-25T23:08:29Z",
      "closedAt": "2024-09-25T23:08:29Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@wangshan I suggest we close this, since we don't yet know if/when we'll have a draft for DP mechanisms. We'll of course keep the `DpMechanism` here since we're likely going to need it in the future.",
          "createdAt": "2024-09-25T16:51:30Z",
          "updatedAt": "2024-09-25T16:51:30Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOH4FR5852Qrei",
      "title": "Don't require the Client to advertise the task config in every upload request",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/47",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [
        "draft-wang-ppm-dap-taskprov-07"
      ],
      "body": "Currently the Client always advertised the task config in a header. We can save on bandwidth by having the Leader ask the Client for the task config only if it doesn't recognize the task.\r\n\r\nWe could consider doing something similar for the aggregation and collection flows, but (1) the bandwidth savings are less compelling and (2) we would probably need a signal that the sender (e.g., the Leader in the aggregation flow) is using taskprov.\r\n\r\nOriginally suggested by @martinthomson on the mailing list.",
      "createdAt": "2023-11-08T17:26:50Z",
      "updatedAt": "2024-06-28T23:13:26Z",
      "closedAt": "2024-06-28T23:13:26Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "I propose we do nothing about the aggregation and collection flows. For the upload flow, I think the following is sufficient:\r\n\r\nThe Client follows the taskprov-upload protocol as usual, except the \"dap-taskprov\" header has an empty value.* If the Leader doesn't recognize the task, it aborts with \"invalidTask\". (Optionally, the problem detail could indicate that it hasn't configured the task yet.) The Client then retries with the \"dap-taskprov\" header with the serialized task configuration as the value.\r\n\r\n----\r\n* I'm not quite sure if it's valid for an HTTP header to have an empty value. If not, then we can just have some short, sentinel value that the Leader interprets as empty.",
          "createdAt": "2023-11-30T20:03:40Z",
          "updatedAt": "2023-11-30T20:03:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm not quite sure if it's valid for an HTTP header to have an empty value\r\n\r\nIt is valid, but it is very much discouraged.  Omitting fields is preferable.  But then I have to ask why you are using fields, when this is more rightly a property of the payload.  See https://www.rfc-editor.org/rfc/rfc9205.html#name-specifying-http-header-fiel",
          "createdAt": "2023-12-01T02:49:24Z",
          "updatedAt": "2023-12-01T02:49:24Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Requirement: If the Leader speaks both taskprov and non-taskprov (this will usually be the case), then it needs some way to distinguish upload requests for taskprov tasks from all other upload requests.\r\n\r\nIf we stick the task config in the body, then we would need to encode the body such that the Leader can distinguish between `(report, task_config)` for taskprov tasks and `report` for other tasks. Further, the encoding will need to be backwards compatible, i.e., non-taskprov tasks should have no change to the request body. It's not immediately clear to me how to do this.\r\n\r\nThe \"dap-taskprov\" header is nice because it encodes intent in a way that's backwards compatible. Indeed, I think this is more or less the same reasoning as https://www.rfc-editor.org/rfc/rfc9205.html#section-4.7-2.3.\r\n\r\nOne potential option is to just omit the \"dap-taskprov\" header. We would lose a bit of information here, because we can't distinguish between unreocgnized tasks and tasks that have not yet been configured via taskprov. However I don't really know how useful this is. (@wangshan may have some insight here.)\r\n\r\nAnother option would be to encode the Client's intent in the header. In particular it would have one of two values:\"\r\n* `None` - please ask me to retry with the task config if you don't already have it\r\n* `Some(task_config)`",
          "createdAt": "2023-12-01T20:16:07Z",
          "updatedAt": "2023-12-01T20:16:07Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson Having `task_config` in header also gives us the bandwidth save without making a wire breaking change in aggregate flow, since putting `task_config` in each reportShare will be very wasteful in aggregate flow, and there's no extension struct defined for aggregate flow yet.\r\n\r\nI think @cjpatton's solution is valid, I'll add that the re-try behaviour should be optional, for clients that don't want to/unable perform re-tries. If having empty header is very desirable, then perhaps adding a constant as content to indicate `taskprov` opt-in, for eg. the codepoint of taskprov extension?\r\n\r\nI also agree this is mainly an upload flow issue, not much benefit to optimize aggregate flow.\r\n\r\n\r\n \r\n",
          "createdAt": "2023-12-04T18:41:30Z",
          "updatedAt": "2023-12-04T18:45:54Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "> One potential option is to just omit the \"dap-taskprov\" header. We would lose a bit of information here, because we can't distinguish between unreocgnized tasks and tasks that have not yet been configured via taskprov. However I don't really know how useful this is. (@wangshan may have some insight here.)\r\n\r\nIt's probably not crucial. In either case the leader will have to abort. But unless we want to save a few bytes, I think having explicit information is always better than implicit.",
          "createdAt": "2023-12-04T18:51:13Z",
          "updatedAt": "2023-12-04T18:52:09Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "NONE",
          "body": "Is there any work planned on this issue?  It would be nice to get the essential protocol components sorted out if you are still seeking adoption in PPM.",
          "createdAt": "2024-05-03T19:57:48Z",
          "updatedAt": "2024-05-03T19:57:48Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "We're still interested in getting this adopted. We can definitely knock this out ahead of IETF 120.",
          "createdAt": "2024-05-06T14:01:15Z",
          "updatedAt": "2024-05-06T14:01:15Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOH4FR5852Qvm6",
      "title": "Privacy considerations: Tracking users across tasks",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/48",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [
        "draft-wang-ppm-dap-taskprov-07"
      ],
      "body": "@bemasc pointed out the following attack at IETF 118. A malicious Author can provision a Client with a unique task that allows it to track uploads from the Client over time. This might allow it to collude with the Leader and track where they are.\r\n\r\nIs this an attack we're concerned about?",
      "createdAt": "2023-11-08T17:38:09Z",
      "updatedAt": "2024-07-08T16:17:36Z",
      "closedAt": "2024-07-08T16:17:36Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the only thing we can do here is not the attack in privacy considerations. Note that this is not an attack on the task binding property of the draft, but only the provisioning part.",
          "createdAt": "2024-06-12T23:27:38Z",
          "updatedAt": "2024-06-12T23:27:38Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "I_kwDOH4FR5854mUEz",
      "title": "Separate transparency technique from in-line provisioning",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/54",
      "state": "CLOSED",
      "author": "simon-friedberger",
      "authorAssociation": "NONE",
      "assignees": [
        "cjpatton"
      ],
      "labels": [
        "draft-wang-ppm-dap-taskprov-07"
      ],
      "body": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/500 was closed reasoning that the transparency problem can be solved by taskprov. @cjpatton suggested to split taskprov to enable using the transparency part without in-line provisioning.",
      "createdAt": "2023-12-04T08:37:10Z",
      "updatedAt": "2024-06-26T14:32:28Z",
      "closedAt": "2024-06-26T14:32:27Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Simon. Based on the feedback from IETF 118 I think we definitely need to implement this.\r\n\r\nFirst, we need to be very careful with the word \"transparency\". Taskprov does not provide transparency in the sense of \"Certificate Transparency\" or the newly formed Key Transparency WG at IETF. Instead what we get is a property we might call **task binding**: _Correct execution of a task implies agreement on the task config_. (Conversely, disagreement on the config implies abort.)\r\n\r\nI'd like to suggest the following rework. There will be two major sections.\r\n\r\nThe first section would describe how task binding works. In particular it would define `TaskConfig` and describe how to compute the task ID.\r\n\r\nThe second section would describe the `taskprov` report extension and attendant behavior changes. It would also describe deriving the VDAF verify key.",
          "createdAt": "2023-12-04T20:23:00Z",
          "updatedAt": "2023-12-04T20:23:00Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "I_kwDOH4FR5856DW3B",
      "title": "Align with DAP-09",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/56",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update references:\r\n* DAP https://datatracker.ietf.org/doc/draft-ietf-ppm-dap/09/\r\n* VDAF https://datatracker.ietf.org/doc/draft-irtf-cfrg-vdaf/08/",
      "createdAt": "2023-12-19T00:14:44Z",
      "updatedAt": "2024-01-16T16:44:20Z",
      "closedAt": "2024-01-16T16:44:20Z",
      "comments": []
    },
    {
      "number": 62,
      "id": "I_kwDOH4FR586HFv7O",
      "title": "Consider adding task start time",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/62",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [
        "draft-01",
        "wire breaking",
        "interim-2024-10-24"
      ],
      "body": "When deciding whether to opt in to a task, a party knows only when the task expires, not how long the task was in use. Imagine for example a client uploads a report to a task that expires in two years; then two years minus one month later, the Leader wants to aggregate it. Should the Helper oblige?\r\n\r\nIt sounds reasonable to include in the `TaskConfig` an indication of when the task began.",
      "createdAt": "2024-04-26T20:04:14Z",
      "updatedAt": "2024-10-25T14:54:06Z",
      "closedAt": "2024-10-25T14:54:06Z",
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "While working on this: Can the aggregator figure out the start time when it receives the first report of a task ID? In the example:\r\n\r\n> for example a client uploads a report to a task that expires in two years; then two years minus one month later, the Leader wants to aggregate it. Should the Helper oblige?\r\n\r\nI think this is a valid case for helper to just process the request, since the task hasn't expired?",
          "createdAt": "2024-10-08T14:13:55Z",
          "updatedAt": "2024-10-08T14:13:55Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "My suspiciion is that it will be helpful to stamp when the Task Author _intends_ for the task to begin. That way we can reject reports with timestamps begin prior to the start of the task.",
          "createdAt": "2024-10-08T14:49:47Z",
          "updatedAt": "2024-10-08T14:49:47Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "I_kwDOH4FR586LuZjW",
      "title": "Remove the Poplar1 VDAF variant",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/63",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Heavy hitters is no longer supported as of DAP-11. We could still use Poplar1 for some limited use cases, like splitting counts by client attributes. However [Mastic](https://github.com/jimouris/draft-mouris-cfrg-mastic) accomplishes a more general version of this functionality. If/when it's adopted, we may also want to add it to taskprov.",
      "createdAt": "2024-06-10T15:22:28Z",
      "updatedAt": "2024-06-11T23:03:36Z",
      "closedAt": "2024-06-11T23:03:36Z",
      "comments": []
    },
    {
      "number": 64,
      "id": "I_kwDOH4FR586MDjtt",
      "title": "Consider salting the task ID computation",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/64",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [
        "draft-01",
        "wire breaking"
      ],
      "body": "The task ID is just the SHA-256 hash of the `TaskConfig`. Prepending the input with a context string would make cross-protocol attacks on Taskprov less likely.",
      "createdAt": "2024-06-12T21:53:25Z",
      "updatedAt": "2024-10-09T14:39:20Z",
      "closedAt": "2024-10-09T14:39:20Z",
      "comments": []
    },
    {
      "number": 70,
      "id": "I_kwDOH4FR586Vq9gn",
      "title": "Update codepoints for draft-irtf-cfrg-vdaf-12",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/70",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [
        "draft-01",
        "wire breaking"
      ],
      "body": "We will likely re-assign codepoints in the next VDAF draft: https://github.com/cfrg/draft-irtf-cfrg-vdaf/pull/417",
      "createdAt": "2024-09-06T19:25:04Z",
      "updatedAt": "2024-10-10T21:52:12Z",
      "closedAt": "2024-10-10T21:52:12Z",
      "comments": []
    },
    {
      "number": 71,
      "id": "I_kwDOH4FR586W779y",
      "title": "tls-presentation: Set limit for length-prefixed fields",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/71",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Along the same lines as https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/110.",
      "createdAt": "2024-09-17T22:35:31Z",
      "updatedAt": "2024-09-25T16:46:48Z",
      "closedAt": "2024-09-25T16:46:48Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like the most likely outcome is that we'll set the lower limits to 0: https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/pull/587\r\n\r\nIf so, then there's no action to take here.",
          "createdAt": "2024-09-25T14:51:38Z",
          "updatedAt": "2024-09-25T14:51:38Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "I_kwDOH4FR586Yd2yN",
      "title": "IANA considerations",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/72",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [
        "draft-01"
      ],
      "body": "We will definitely need to ask IANA to register the codepoint in the upload extensions registry. One open quesiton is how to maintain taskprov as new query types or VDAFs are defined. We also don't yet have a registry (or request for a registry) for DP mecanisms.",
      "createdAt": "2024-10-01T01:19:20Z",
      "updatedAt": "2024-10-18T21:24:00Z",
      "closedAt": "2024-10-18T21:24:00Z",
      "comments": []
    },
    {
      "number": 83,
      "id": "I_kwDOH4FR586aYsip",
      "title": "More codepoints for DP mechansims?",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/83",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [
        "draft-01",
        "wire breaking",
        "interim-2024-10-24"
      ],
      "body": "At the moment we've only allocated a byte for DP mechanism identifiers. For VDAFs we've allocated four bytes. It doesn't seem out of the question to me that we end up with more than 256 DP mechanisms.",
      "createdAt": "2024-10-15T23:34:05Z",
      "updatedAt": "2024-10-25T14:54:28Z",
      "closedAt": "2024-10-25T14:54:28Z",
      "comments": [
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "I doubt we'll have that many varieties of differential privacy. However, I think it's fine to align with VDAF, extra 3 bytes should have no perf impact. ",
          "createdAt": "2024-10-16T10:35:30Z",
          "updatedAt": "2024-10-16T10:35:49Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "I_kwDOH4FR586aarVs",
      "title": "Extensibility",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/85",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [
        "draft-01",
        "interim-2024-10-24"
      ],
      "body": "I'm in the process of writing up a few DAP (upload) extensions and realized that if they are going to be generically useful, then it would make sense to have corresponding changes to be included in task configurations.  For this draft, that means having some means to include that configuration in the creation of the task, but there are no extensibility points in this document that would allow that to happen.  Can an extension mechanism be defined?\r\n\r\nMost likely, this would have to be like upload extensions, where ignorance of the extension would invalidate the entire request.\r\n\r\nI would also recommend that the DP configuration be moved to an extension.  Then you can move the definition of the specifics to the DP draft and remove one potentially-awkward interdependency.",
      "createdAt": "2024-10-16T05:36:34Z",
      "updatedAt": "2024-10-31T16:36:28Z",
      "closedAt": "2024-10-31T16:36:28Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm in the process of writing up a few DAP (upload) extensions and realized that if they are going to be generically useful, then it would make sense to have corresponding changes to be included in task configurations. For this draft, that means having some means to include that configuration in the creation of the task, but there are no extensibility points in this document that would allow that to happen. Can an extension mechanism be defined?\r\n\r\nI had this exact thought recently. Could you take a look at https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/84, specifically the new \"Extending this Document\" section? I think this is a step in the right direction, although I think there may still be some open questions, e.g., how precisely does one \"extend\" the `DpConfig` structure.\r\n\r\n> Most likely, this would have to be like upload extensions, where ignorance of the extension would invalidate the entire request.\r\n\r\nI believe this is covered by the opt-in mechanism: https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap-taskprov/draft-ietf-ppm-dap-taskprov.html#section-4.4-4\r\n\r\n> I would also recommend that the DP configuration be moved to an extension. Then you can move the definition of the specifics to the DP draft and remove one potentially-awkward interdependency.\r\n\r\nAre you thinking of an extension to DAP or to this document? \r\n\r\n",
          "createdAt": "2024-10-16T15:01:03Z",
          "updatedAt": "2024-10-16T15:01:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think that #84 really works for me.  As far as I can see, you aren't adding explicit extension points (in TLV, say), but saying \"add stuff to the various configs as needed\", which creates a coordination problem.  If you have multiple definitions for extension, how do they ensure that both can be used?  That is, which addition comes first?\r\n\r\nThat's why we end up with TLVs (though with a requirement to understand the extension, you might reasonably drop the \"L\" part).\r\n\r\n(I was thinking that it might be nice to have a taskprov extension in the DP draft.)",
          "createdAt": "2024-10-17T01:40:24Z",
          "updatedAt": "2024-10-17T01:40:24Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't think that #84 really works for me. As far as I can see, you aren't adding explicit extension points (in TLV, say), but saying \"add stuff to the various configs as needed\", which creates a coordination problem. If you have multiple definitions for extension, how do they ensure that both can be used? That is, which addition comes first?\r\n\r\nDo you mean multiple definitions of \"_an_ extension\"? How might this happen? Isn't the IANA registry supposed to ensure that a codepoint points to one and only one document?\r\n\r\nOr do you mean multiple definitions of \"extension\"?\r\n\r\n> That's why we end up with TLVs (though with a requirement to understand the extension, you might reasonably drop the \"L\" part).\r\n\r\nI'm pretty sure TLV stands for Tag-Length-Value; let me know if you mean something else. \r\n\r\nIn fact, the DAP document does define TLV-style extension points: for DAP batch modes, VDAFs, and DP mechanisms. (The batch mode registry is in the DAP document; the VDAF registry is in the VDAF document; and the DP mechanism registry is here.) Note that the L (i.e., the length) actually comes before the T (i.e., the tag) in our case; see `TaskConfig` in #84. We could easily change this if we wanted.\r\n\r\nSo how do you add a DP mechanism? Here is the extension point for DP mechanisms (excerpted from the #84):\r\n\r\n```\r\nenum {\r\n    reserved(0), /* Reserved for testing purposes */\r\n    none(1),\r\n    (255)\r\n} DpMechanism;\r\n\r\nstruct {\r\n    DpMechanism dp_mechanism;\r\n    select (DpConfig.dp_mechanism) {\r\n        case none: Empty;\r\n    };\r\n} DpConfig;\r\n```\r\n\r\nLet's say RFC 1234 defines a new DP mechanism. The document is supposed to describe how it modifies `DpMechanism`. In particular, it would define its codepoint like so:\r\n\r\n> ```\r\n> enum {\r\n>     cool_guy(0x42), (255)\r\n> } DpMechanism;\r\n> ```\r\n\r\nIt also needs to describe how it modifies `DpConfig`. That is, it would specify the payload for the `case cool_guy` arm  in the `select` block. I'm not sure what the best way to spell this would be. Perhaps something like this:\r\n\r\n> The payload of the `cool_guy` variant of the `DpConfig` following is structured as follows:\r\n>\r\n> ```\r\n> struct {\r\n>     Cool stuff<0..2^16>;\r\n> } CoolGuyConfig;\r\n> ```\r\n\r\nWhat do you think?\r\n\r\n> (I was thinking that it might be nice to have a taskprov extension in the DP draft.)\r\n\r\nA bit of context as to why we define `DpMechanism` here rather than in the DP draft: There is no active work on the DP draft at the moment. The last time we talked about it, the WG was split between doing nothing at all and taking an entirely different approach. In the meantime, we already knew we need the extension point in the task config, so we went ahead and added it to this draft. It has existed well before adoption.\r\n\r\nNow, to your point: Now that we have consensus to work on taskprov, we could do something like this:\r\n\r\n* Add a section to DAP that defines `BatchModeConfig` (i.e., taskprov encoding)\r\n* Add a section to VDAF that defines `VdafConfig` (i.e., taskprov encoding)\r\n* Refresh the DP draft, moving the `DpMechanism` there as well as the `DpConfig` (i.e., taskprov encoding) (or https://github.com/martinthomson/dap-dp-ext could do this?)\r\n\r\nI think the problem we'd have is one of chickens and eggs. My understanding is that RFCs can't have _normative_ circular dependencies. For example, taskprov normatively uses DAP, so DAP can't normatively use taskprov. Perhaps that's not the case? It would definitely make things more complicated when we have to update drafts, although hopefully we're pretty close to done with DAP.\r\n\r\nPR  #84 solves this differently: documents that extend taskprov have a special section that describes how they extend it.\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2024-10-17T15:12:30Z",
          "updatedAt": "2024-10-17T15:45:00Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson FYI I'm merging #84, as I think there are some improvments that are helpful in any case. We can fix stuff as needed as part of this issue.",
          "createdAt": "2024-10-18T21:23:49Z",
          "updatedAt": "2024-10-18T21:23:49Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "2024/10/24 interim: I misunderstood the issue that @martinthomson is raising here. What's actually needed is an extension point for `TaskConfig` itself. For example, the parties may want to agree on the identity (e.g., a URI) of whichever party gets the aggregate result. This could be expressed as an extension for taskprov.\r\n\r\nSo we'll create a PR that adds an extension point to `TaskConfig` (similar to the report extensions in DAP) and ask IANA to create a registry for it.\r\n\r\n",
          "createdAt": "2024-10-24T21:56:46Z",
          "updatedAt": "2024-10-24T21:58:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I recommend that the DP mechanisms be removed from the taskprov draft in favor of being specified in the document that first defines a real DP mechanism.  The extension mechanism should be enough for DP.\r\n\r\nI can see two ways of dealing with new DP mechanisms:\r\n\r\n1. Define a new extension for each and sketch out some rules for how to handle cases where there are multiple mechanisms (apply all of them or don't allow multiple both seem reasonable, though I'd probably choose the latter).\r\n2. Define a new extension for all DP mechanisms and have that contain content that is based on the choice of mechanism.  That sort of nesting would match the current design, but would also run afoul of recommendations in RFC 9170.",
          "createdAt": "2024-10-25T03:59:40Z",
          "updatedAt": "2024-10-25T03:59:40Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @martinthomson! I've filed #88 which is more narrowly scoped on this issue ... I'll reference your comment there.",
          "createdAt": "2024-10-25T14:10:18Z",
          "updatedAt": "2024-10-25T14:10:18Z"
        }
      ]
    },
    {
      "number": 88,
      "id": "I_kwDOH4FR586buZpP",
      "title": "Consider removing the extension point for DP mechanisms",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/88",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [
        "draft-01",
        "wire breaking"
      ],
      "body": "2024/10/26 interim: It's a little confusing that this draft defines a a registry for DP mechanism codepoints. We could instead move DP mechanisms into a generic task config extension: see https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/85#issuecomment-2436405240.",
      "createdAt": "2024-10-24T22:00:06Z",
      "updatedAt": "2024-10-31T16:39:43Z",
      "closedAt": "2024-10-31T16:39:43Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "MT's point, which I agree with: https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/85#issuecomment-2436771339",
          "createdAt": "2024-10-25T14:11:03Z",
          "updatedAt": "2024-10-25T14:11:03Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "I've gotten some more feedback offline about this and we're good to remove this. PR incoming.",
          "createdAt": "2024-10-29T23:57:42Z",
          "updatedAt": "2024-10-29T23:57:42Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "I_kwDOH4FR586ccGOX",
      "title": "Add IANA considerations for task advertisement",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/92",
      "state": "OPEN",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pre-WGLC"
      ],
      "body": "In the optional in-band task provisioning protocol, the `TaskConfig` is conveyed in an HTTP header, \"dap-taskprov\". We need to register this header, [similar to how the DAP draft requests registration of the media types for protocol messages](https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html#section-8.1). We also need to rename the header.",
      "createdAt": "2024-10-30T16:12:18Z",
      "updatedAt": "2024-10-30T16:12:18Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 94,
      "id": "I_kwDOH4FR586fmalb",
      "title": "Provide guidance on whether to use public vs private extension for Taskbind",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/issues/94",
      "state": "OPEN",
      "author": "branlwyd",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "DAP-13 introduced the concept of \"[public extensions](https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/pull/632)\", complementing the preexisting (private) extension mechanism.\r\n\r\nThese extensions can conflict with one another (i.e. it is not possible to send the same extension type in both the public & private extensions), but it is left open if/how the choice of public vs private extensions changes the semantics of any given extension.\r\n\r\nI think taskprov should provide some guidance as to which type of extension the Taskbind extension should be used with.\r\n\r\nMy initial thoughts are: the Taskbind extension uses an empty extension body, and is purposefully included in the extensions for both the Leader & Helper aggregators. Therefore, I think recommending this extension to be included in the public extensions makes sense. I don't have a strong opinion on whether we should block including this extension in the private extensions.",
      "createdAt": "2024-11-21T00:57:47Z",
      "updatedAt": "2024-11-21T19:15:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "branlwyd",
          "authorAssociation": "NONE",
          "body": "Ah, actually, the [Client Behavior](https://www.ietf.org/archive/id/draft-ietf-ppm-dap-taskprov-01.html#name-client-behavior) section says the following:\r\n\r\n> The extension codepoint taskbind MUST be offered in the extensions field of both Leader and Helper's PlaintextInputShare. In addition, each report's task ID MUST be computed as described in [Section 3](https://www.ietf.org/archive/id/draft-ietf-ppm-dap-taskprov-01.html#definition).\r\n\r\nThis implies that the extension must be included in the _private_ extensions, since private extensions are included in each aggregators' `PlaintextInputShare`.\r\n\r\nI suggest we at least accept public extensions, too, and probably recommend the use of a public extension.",
          "createdAt": "2024-11-21T19:15:05Z",
          "updatedAt": "2024-11-21T19:15:05Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOH4FR5849wBUs",
      "title": "Add skeleton for the document",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/1",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Here is the doc skeleton as a PR. Feel free to merge and continue working, or you can request changes if you prefer to do things that way. Once you merge, CI will build and upload the changes automatically to https://wangshan.github.io/draft-wang-ppm-dap-taskprov/#go.draft-wang-ppm-dap-taskprov.html.",
      "createdAt": "2022-08-24T21:18:16Z",
      "updatedAt": "2022-09-06T15:26:07Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "72ce2b4909c06ca288583afa1e13492491faa43e",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/skeleton",
      "headRefOid": "a27b7532dd873ace6729357df465fad12b9d42a1",
      "closedAt": "2022-09-06T15:26:06Z",
      "mergedAt": "2022-09-06T15:26:06Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "d700c41682a8f5b59f9b57b42612279ee489c23b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585Bbx9I",
          "commit": {
            "abbreviatedOid": "a27b753"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-06T15:25:51Z",
          "updatedAt": "2022-09-06T15:25:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOH4FR584-TxEe",
      "title": "Add task configuration schema and describe client behaviour",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/2",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "First update, it's mostly a brain dump, please have a look. I'll fix the build failure early next week.",
      "createdAt": "2022-09-03T01:20:04Z",
      "updatedAt": "2022-09-14T17:08:51Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "d700c41682a8f5b59f9b57b42612279ee489c23b",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "task-configuration-schema",
      "headRefOid": "84da91b7d82fdce6c168fb8a42eeb86b6a2b9278",
      "closedAt": "2022-09-14T17:08:51Z",
      "mergedAt": "2022-09-14T17:08:51Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "6d5319bacf38115206557c3d07cd7ae0d0ec76c9"
      },
      "comments": [
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "@cjpatton \r\n\r\n```\r\nVdafType uint32_t; // Codepoint from I.D-draft-irtf-cfrg-vdaf-03\r\n\r\nstruct {\r\n    VdafType type;\r\n    select type (type) {\r\n        Prio3Aes138Count: Empty;\r\n        Prio3Aes128Sum: uint8_t bits;\r\n        Prio3Aes128Histogram: uint64_t buckets<0..2^16-1>;\r\n        Poplar1Aes128:  uint16 bits;\r\n    }\r\n} VdafConfig;\r\n```\r\nwhy do we need two definitions of `VdafType uint32_t` and `VdafType type`, is the former a type alias?\r\n\r\nI'm thinking the VdafConfig struct is up to the VDAF, making it opaque will allow new VDAFs to be defined without changing this extension draft (like an extension on this extension), otherwise wouldn't this extension be tied to all the VDAFs above?\r\n",
          "createdAt": "2022-09-06T19:00:12Z",
          "updatedAt": "2022-09-06T19:00:12Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> That's a good point: We need to make sure that unspecified VDAFs can still be encoded. This seems like a reasonable way to do it. However, for this extension to be maximally useful, it will be necessary to spell out serialization of the configs of standardized VDAFs. Just something to keep in mind for the future.\r\n\r\nI'll bring back the standardized VDAFs in a VdafConfig.",
          "createdAt": "2022-09-07T18:48:26Z",
          "updatedAt": "2022-09-07T18:48:26Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "@cjpatton why a prio3 histogram uses a list of buckets, is it for non-continuous buckets? does this mean the dimension of the one hot vector can only be (2^16-8)/8 = 8191 ",
          "createdAt": "2022-09-09T12:27:22Z",
          "updatedAt": "2022-09-09T12:27:22Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> @cjpatton why a prio3 histogram uses a list of buckets, is it for non-continuous buckets? does this mean the dimension of the one hot vector can only be (2^16-8)/8 = 8191\r\n\r\nFor this type, `buckets` defines the boundaries between the buckets: See https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html#name-prio3aes128histogram.\r\n\r\nYes, this would constrain the dimension of the vector. We could bump the length prefix to 24 or 32 bits if needed.",
          "createdAt": "2022-09-12T17:00:32Z",
          "updatedAt": "2022-09-12T17:00:32Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "> What should an Aggregator do if the task ID does not match the hash of the task config? We'll need to spell this out in both the \"Leader Behavior\" and \"Helper Behavior\" sections.\r\n\r\n@cjpatton do we need to do anything? the current text doesn't specify any checks on aggregator side about task ID vs. hash(task_config). Any bad task ID will be grouped to it's own (bad) task.",
          "createdAt": "2022-09-12T21:46:17Z",
          "updatedAt": "2022-09-12T21:46:17Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "> > @cjpatton why a prio3 histogram uses a list of buckets, is it for non-continuous buckets? does this mean the dimension of the one hot vector can only be (2^16-8)/8 = 8191\r\n> \r\n> For this type, `buckets` defines the boundaries between the buckets: See https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html#name-prio3aes128histogram.\r\n> \r\n> Yes, this would constrain the dimension of the vector. We could bump the length prefix to 24 or 32 bits if needed.\r\n\r\nSo this is related to this issue in DAP: https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/311?\r\nI'll create an issue in VDAF to bump this, 8192 is very limiting when used with differential privacy.",
          "createdAt": "2022-09-12T21:52:27Z",
          "updatedAt": "2022-09-12T21:52:27Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> So this is related to this issue in DAP: [ietf-wg-ppm/draft-ietf-ppm-dap#311](https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/311)? I'll create an issue in VDAF to bump this, 8192 is very limiting when used with differential privacy.\r\n\r\nThis not related to https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/311. It's also not relevant to VDAF, which does not specify an encoding of VDAF config parameters. If you're expecting needing a large histogram, then all we need to do is increase the maximum length of the buckets list here. We're free to do whatever we want in this draft.",
          "createdAt": "2022-09-12T23:21:02Z",
          "updatedAt": "2022-09-12T23:21:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585Bbt59",
          "commit": {
            "abbreviatedOid": "84c8ed6"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-06T15:16:15Z",
          "updatedAt": "2022-09-06T15:27:33Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "nit: I think 4-character tab is a bit more readable.",
              "createdAt": "2022-09-06T15:16:16Z",
              "updatedAt": "2022-09-06T15:27:33Z"
            },
            {
              "originalPosition": 47,
              "body": "Good catch. I think underscore is better, but consistency with DAP is more important. I filed https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/314 to figure this out.",
              "createdAt": "2022-09-06T15:21:16Z",
              "updatedAt": "2022-09-06T15:27:33Z"
            },
            {
              "originalPosition": 57,
              "body": "Here and below.\r\n\r\n```suggestion\r\n  opaque task_info<1..2^8-1>;\r\n```",
              "createdAt": "2022-09-06T15:21:54Z",
              "updatedAt": "2022-09-06T15:27:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BcDmH",
          "commit": {
            "abbreviatedOid": "dcee929"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "First pass of the schema. one high-level comment. The structure of the VDAF config is incomplete. Plus,  I think it could be spelled out cleaner. I imagine it looking something like this:\r\n\r\n```\r\nVdafType uint32_t; // Codepoint from I.D-draft-irtf-cfrg-vdaf-03\r\n\r\nstruct {\r\n    VdafType type;\r\n    select type (type) {\r\n        Prio3Aes138Count: Empty;\r\n        Prio3Aes128Sum: uint8_t bits;\r\n        Prio3Aes128Histogram: uint64_t buckets<0..2^16-1>;\r\n        Poplar1Aes128:  uint16 bits;\r\n    }\r\n} VdafConfig;\r\n```\r\n\r\nThen replace `vdaf_type` and `vdaf_parameter` with a single `VdafConfig`.",
          "createdAt": "2022-09-06T16:00:37Z",
          "updatedAt": "2022-09-06T17:12:10Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "Wrap lines at 80 characters",
              "createdAt": "2022-09-06T16:00:37Z",
              "updatedAt": "2022-09-06T17:12:10Z"
            },
            {
              "originalPosition": 119,
              "body": "Unhelpful comment\r\n```suggestion\r\n```",
              "createdAt": "2022-09-06T16:40:40Z",
              "updatedAt": "2022-09-06T17:12:10Z"
            },
            {
              "originalPosition": 130,
              "body": "```suggestion\r\n    QueryConfig query_config; // Defined in I-D.draft-ietf-ppm-dap-02\r\n```",
              "createdAt": "2022-09-06T16:41:56Z",
              "updatedAt": "2022-09-06T17:12:10Z"
            },
            {
              "originalPosition": 148,
              "body": "Don't repeat the definition, just refer to it. I've added a suggestion above for how to do this. Here's another example: https://www.ietf.org/archive/id/draft-ietf-tls-esni-14.html#name-encrypted-clienthello-confi",
              "createdAt": "2022-09-06T16:43:19Z",
              "updatedAt": "2022-09-06T17:12:10Z"
            },
            {
              "originalPosition": 205,
              "body": "Unhelpful comment (we aren't going to ever reserve a codepoint in this space in this document).\r\n```suggestion\r\n```",
              "createdAt": "2022-09-06T16:45:23Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 198,
              "body": "All this enum does is define mapping to codepoints defined elsewhere. This doesn't constitute IANA considerations.\r\n```suggestion\r\n```",
              "createdAt": "2022-09-06T16:46:29Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 208,
              "body": "I don't see any reason to allocate these codepoints until there is a document that describes how these VDAFs work.",
              "createdAt": "2022-09-06T16:47:40Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 214,
              "body": "VDAF codepoints are 32 bits\r\n\r\n```suggestion\r\n    (2^32-1)\r\n```",
              "createdAt": "2022-09-06T16:47:42Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 158,
              "body": "I don't defining this struct is super helpful. Better I think to just stick max_batch_size in the relevant spot in QueryConfig.",
              "createdAt": "2022-09-06T16:49:18Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 246,
              "body": "We're going to need more for Prio3. Each variant (e.g., Prio3Aes128Sum) has parameters (e.g., number of bits of each summand).",
              "createdAt": "2022-09-06T16:51:55Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 245,
              "body": "What about the dimension?",
              "createdAt": "2022-09-06T16:52:38Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 240,
              "body": "Why is vdaf_data `opaque`? It should just be `VdafParameters`.",
              "createdAt": "2022-09-06T16:53:00Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 250,
              "body": "For consistency with `QueryConfig` and `TaskConfig`.\r\n\r\n```suggestion\r\n} VdafConfig;\r\n```",
              "createdAt": "2022-09-06T16:53:24Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 181,
              "body": "This should not be opaque, since the structure is actually spelled out here.",
              "createdAt": "2022-09-06T16:57:19Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            },
            {
              "originalPosition": 225,
              "body": "This is meant to indicate the maxiumum value of one of these codepoints. If you're assertion is that a byte should be sufficient, then the value should be 255 (the largest unsigned integer)\r\n",
              "createdAt": "2022-09-06T16:58:39Z",
              "updatedAt": "2022-09-06T17:12:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Bc40Q",
          "commit": {
            "abbreviatedOid": "1972d2b"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-06T18:46:32Z",
          "updatedAt": "2022-09-06T18:46:33Z",
          "comments": [
            {
              "originalPosition": 148,
              "body": "is `//` a valid comment format for TLS?",
              "createdAt": "2022-09-06T18:46:33Z",
              "updatedAt": "2022-09-06T18:46:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Bc5-l",
          "commit": {
            "abbreviatedOid": "23cef9b"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-06T18:50:52Z",
          "updatedAt": "2022-09-06T18:50:52Z",
          "comments": [
            {
              "originalPosition": 158,
              "body": "wouldn't it be more clear if we have an explicitly type for it? for e.g. if we have another field required by FixedSizeQueryConfig in the future",
              "createdAt": "2022-09-06T18:50:52Z",
              "updatedAt": "2022-09-06T18:50:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Bc6WG",
          "commit": {
            "abbreviatedOid": "dcee929"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-06T18:52:18Z",
          "updatedAt": "2022-09-06T18:52:18Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "type removed",
              "createdAt": "2022-09-06T18:52:18Z",
              "updatedAt": "2022-09-06T18:52:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BdGs4",
          "commit": {
            "abbreviatedOid": "23cef9b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Extension structure is looking good. I'll look at the rest in the next pass.\r\n\r\n> ```\r\n> VdafType uint32_t; // Codepoint from I.D-draft-irtf-cfrg-vdaf-03\r\n> \r\n> struct {\r\n>     VdafType type;\r\n>     select type (type) {\r\n>         Prio3Aes138Count: Empty;\r\n>         Prio3Aes128Sum: uint8_t bits;\r\n>         Prio3Aes128Histogram: uint64_t buckets<0..2^16-1>;\r\n>         Poplar1Aes128:  uint16 bits;\r\n>     }\r\n> } VdafConfig;\r\n> ```\r\n> \r\n> why do we need two definitions of `VdafType uint32_t` and `VdafType type`, is the former a type alias?\r\n\r\n* `VdafType uint32_t;` defines `VdafType` as a type alias for `uint32_t`.\r\n* `VdafType type;`, in the given context, defines the type of a field struct. It does not define a type. Instead, what it says is that the struct includes a `VdafType`.\r\n\r\n\r\n> I'm thinking the VdafConfig struct is up to the VDAF, making it opaque will allow new VDAFs to be defined without changing this extension draft (like an extension on this extension), otherwise wouldn't this extension be tied to all the VDAFs above?\r\n\r\nThat's a good point: We need to make sure that unspecified VDAFs can still be encoded. This seems like a reasonable way to do it. However, for this extension to be maximally useful, it will be necessary to spell out serialization of the configs of standardized VDAFs. Just something to keep in mind for the future.\r\n",
          "createdAt": "2022-09-06T19:35:43Z",
          "updatedAt": "2022-09-06T19:56:55Z",
          "comments": [
            {
              "originalPosition": 158,
              "body": "It's just my opinion, but I don't think this is more clear, since you now have to look in two places to understand the information conveyed by QueryConfig. However, defining new structs is sometimes appropriate. For example:\r\n1.  when either you need to serialize the same data in multiple places in the protocol\r\n2. when there are a large number of parameters in the struct.",
              "createdAt": "2022-09-06T19:35:43Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 130,
              "body": "nit (weird mix of block and inline comments; similarly below): \r\n```suggestion\r\n    /* properties that all batches for this task must have.  Defined in I-D.draft-ietf-ppm-dap-02. */\r\n    QueryConfig query_config;\r\n\r\n```",
              "createdAt": "2022-09-06T19:37:51Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n    email: \"chrispatton+ietf@gmail.com\"\r\n```",
              "createdAt": "2022-09-06T19:39:03Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 361,
              "body": "Chris uses his personal email for IETF contributions\r\n```suggestion\r\ncaw@heapingbits.net\r\n```",
              "createdAt": "2022-09-06T19:40:34Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 153,
              "body": "```suggestion\r\n    QueryType query_type;    // Defined in I-D.draft-ietf-ppm-dap-02\r\n    Duration time_precision; // Defined in I-D.draft-ietf-ppm-dap-02\r\n```",
              "createdAt": "2022-09-06T19:41:04Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 135,
              "body": "nit: In the VDAF spec I've adopted the convention of capitalizing Client, Aggregator, and Collector. For the DAP spec I've been pushing for doing the same. We can follow this convention or not, but we should try to be consistent.\r\n```suggestion\r\n    /* Time up to which Clients are allowed to upload to this task. */\r\n```",
              "createdAt": "2022-09-06T19:50:12Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 124,
              "body": "Probably best to follow block comment conventions in the DAP spec.\r\n```suggestion\r\n    /* A list of URLs relative to which an aggregator's API endpoints\r\n     can be found. */\r\n```",
              "createdAt": "2022-09-06T19:52:31Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 139,
              "body": "We need to say here that this is a codepoint for either a standard VDAF or reserved for private use.",
              "createdAt": "2022-09-06T19:54:27Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 144,
              "body": "```suggestion\r\n    opaque vdaf_config<1..2^16-1>;\r\n```",
              "createdAt": "2022-09-06T19:54:40Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 143,
              "body": "```suggestion\r\n    /* Additional parameters relevant for the vdaf_type. */\r\n```",
              "createdAt": "2022-09-06T19:54:54Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            },
            {
              "originalPosition": 181,
              "body": "I don't think this paragraph adds anything. It can be removed.",
              "createdAt": "2022-09-06T19:56:13Z",
              "updatedAt": "2022-09-06T19:56:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Bd4x7",
          "commit": {
            "abbreviatedOid": "23cef9b"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "First pass mostly for spelling mistakes and wordings.",
          "createdAt": "2022-09-06T23:24:12Z",
          "updatedAt": "2022-09-07T00:09:27Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "out-out-band -> out-of-band",
              "createdAt": "2022-09-06T23:24:12Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 42,
              "body": "Since this paragraph only talks about task transparency, I think we can remove \"then return to server for task provision\". The sentence gets a little awkward.",
              "createdAt": "2022-09-06T23:26:10Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 88,
              "body": "proviosion -> provision.",
              "createdAt": "2022-09-06T23:27:41Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 129,
              "body": "`QueryConfig` is only defined in this draft. I think you already mentioned later that `QueryType` is defined in DAP-02, so the DAP-02 reference here can be removed.",
              "createdAt": "2022-09-06T23:30:16Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 196,
              "body": "What's the advantage of agreeing on a separate `TaskID` if `TaskID` can be deterministically hashed based on `TaskConfig`? Maybe for flexibility?",
              "createdAt": "2022-09-06T23:34:11Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 222,
              "body": "extenion -> extension.",
              "createdAt": "2022-09-06T23:36:42Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 251,
              "body": "decode -> decoding",
              "createdAt": "2022-09-06T23:38:33Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 257,
              "body": "should pass `vdaf_data` to the VDAF initialiser ->\r\nshould deserialize `vdaf_data` based on `VdafParameters` schema corresponding to `vdaf_type`, and pass the relevant parameters to the VDAF initialiser.",
              "createdAt": "2022-09-06T23:41:56Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 319,
              "body": "`CollectResp` is only sent back if collector sends a collect job URI that leader recognizes and has completed the collect job for. I think this section is referring to the HTTP status code 404 after collector sends a `CollectReq` with an unrecognized TaskID. I think we can phrase it this way: \"If collector supports `task-prov` extension and receives a HTTP status code 404 Not Found with error type `unrecognizedTask` after sending a `CollectReq`, it SHOULD retry...\". Maybe @cjpatton can correct me if I'm wrong.",
              "createdAt": "2022-09-06T23:46:18Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 218,
              "body": "What's the benefit of mentioning `/hpke_config` endpoint here? I think the only benefit is if one were to query `/hpke_config` with a task ID, it should check how the task ID can be referred. Maybe I'm missing some details.",
              "createdAt": "2022-09-06T23:57:23Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 231,
              "body": "I wonder if we should briefly mention all the \"secret\" parameters in a task that cannot be agreed through the extension-based task provisioning. On top of my head, these include `vdaf_verify_key`, `collector_hpke_config`, and `aggregator_auth_tokens`",
              "createdAt": "2022-09-07T00:00:13Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 301,
              "body": "existing tasks's -> existing task's",
              "createdAt": "2022-09-07T00:02:43Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            },
            {
              "originalPosition": 329,
              "body": "`groupBy operator` -> `groupBy` operator",
              "createdAt": "2022-09-07T00:07:18Z",
              "updatedAt": "2022-09-07T00:09:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BincL",
          "commit": {
            "abbreviatedOid": "7757bd0"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-07T17:55:52Z",
          "updatedAt": "2022-09-07T17:55:53Z",
          "comments": [
            {
              "originalPosition": 158,
              "body": "I'll change this since I don't know what else should be include in FixedSizeQueryConfig yet.",
              "createdAt": "2022-09-07T17:55:52Z",
              "updatedAt": "2022-09-07T17:55:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Bin_e",
          "commit": {
            "abbreviatedOid": "7757bd0"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-07T17:57:54Z",
          "updatedAt": "2022-09-07T17:57:55Z",
          "comments": [
            {
              "originalPosition": 181,
              "body": "@cjpatton The core protocol task configuration includes secrets like `vdaf_verify_key`, I think this should be mentioned explicitly?  @junyechen1996 your comment https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/2/files#r964267738 is basically addressed here",
              "createdAt": "2022-09-07T17:57:55Z",
              "updatedAt": "2022-09-07T17:57:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BipMx",
          "commit": {
            "abbreviatedOid": "7757bd0"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-07T18:02:25Z",
          "updatedAt": "2022-09-07T18:02:25Z",
          "comments": [
            {
              "originalPosition": 196,
              "body": "yes, but thinking about this more, we probably should enforce task ID to be created involving task config, otherwise the aggregator might aggregate the same task ID with different TaskConfig.",
              "createdAt": "2022-09-07T18:02:25Z",
              "updatedAt": "2022-09-07T18:02:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BivLN",
          "commit": {
            "abbreviatedOid": "7757bd0"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-07T18:25:40Z",
          "updatedAt": "2022-09-07T18:25:40Z",
          "comments": [
            {
              "originalPosition": 218,
              "body": "yes that's pretty much it, let me remove this sentence",
              "createdAt": "2022-09-07T18:25:40Z",
              "updatedAt": "2022-09-07T18:25:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Bivmm",
          "commit": {
            "abbreviatedOid": "7757bd0"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-07T18:27:20Z",
          "updatedAt": "2022-09-07T18:27:20Z",
          "comments": [
            {
              "originalPosition": 231,
              "body": "that is mentioned just above the client behaviour section",
              "createdAt": "2022-09-07T18:27:20Z",
              "updatedAt": "2022-09-07T18:27:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BjyeU",
          "commit": {
            "abbreviatedOid": "dcee929"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-07T22:45:36Z",
          "updatedAt": "2022-09-07T22:45:36Z",
          "comments": [
            {
              "originalPosition": 148,
              "body": "Yes",
              "createdAt": "2022-09-07T22:45:36Z",
              "updatedAt": "2022-09-07T22:45:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Bj3ta",
          "commit": {
            "abbreviatedOid": "bdb8294"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Pass of intro and client behavior.",
          "createdAt": "2022-09-07T23:13:48Z",
          "updatedAt": "2022-09-07T23:44:35Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I continue to think that \"transparency\" is not the right sales pitch for this extension. The reason is this: To sell it this way, you'll need to (1) define transparency and (2) to make the case that vanilla DAP *isn't* transparent. So far I don't see a clear/useful definition of transparency for which this case can be made.\r\n\r\nSuppose we define transparency this way: \"A DAP deployment is transparent if what is being measured, and how, is evident to the client.\" Assuming this definition, it's not hard to argue that draft-wang-ppm-taskprov does not add any value relative to vanilla DAP. The important question is: What information does the client have now that it didn't have before? Quoting from the original issue (https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/290):\r\n\r\n> By sending all task parameters to clients then return to the server, we add transparency to the task that clients participate in Client has the choice to see what data has been collected with what parameters (like min_batch_size, max_batch_lifetime, or any differential privacy parameters if that's the privacy guarantee used).  For some clients these task parameters can even be hardcoded on the client side (for e.g. on a mobile device) to avoid any tempering from server.\r\n\r\nWhy is this not true for vanilla DAP? It seems like a deployment is free to surface this information to clients, regardless of how the task is configured. In fact, at some point the client software needs this information in order to participate in the protocol. It's also possible to hardcode DP parameters and use them for multiple tasks for vanilla DAP.\r\n\r\nOn the other hand, I think a *very* strong case for this extension can be made without talking about transparency at all. Namely, it specifies a means of configuring tasks without intervention of a third-party; all information necessary for aggregating a report is carried by the report itself. This is an elegant idea on its own.\r\n\r\n",
              "createdAt": "2022-09-07T23:13:48Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 23,
              "body": "Vanilla DAP does not mandate some sort of \"leader-helper\" agreement. Rather, the means by which parties are configured is not specified.",
              "createdAt": "2022-09-07T23:14:51Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 51,
              "body": "I don't think this property (3.) is new to draft-wang-ppm-taskprov. In fact, it ought to hold for any deployment of DAP.",
              "createdAt": "2022-09-07T23:16:46Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 65,
              "body": "This property as well should hold for any deployment of DAP. Since it's not particular to this extension, I don't think it's worth mentioning in the intro. Of course, in Security Considerations we'll want to discuss why this extension preserves the properties of DAP (i.e., does not introduce any regressions to security).",
              "createdAt": "2022-09-07T23:19:00Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 81,
              "body": "```suggestion\r\nTask provisioning:\r\n```",
              "createdAt": "2022-09-07T23:19:30Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 135,
              "body": "```suggestion\r\n    /* Time up to which Clients are allowed to upload to this task. See\r\n    https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/pull/304. Defined\r\n    in I-D.draft-ietf-ppm-dap-02. */\r\n```",
              "createdAt": "2022-09-07T23:21:21Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 139,
              "body": "```suggestion\r\n    /* A codepoint defined in I-D.draft-irtf-cfrg-vdaf-03 or reserved for private\r\n    use. */\r\n```",
              "createdAt": "2022-09-07T23:21:43Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 158,
              "body": "```suggestion\r\nThe purpose of `TaskConfig` is to define all parameters that are necessary\r\nfor configuring an aggregator. It includes all the fields to be\r\n```",
              "createdAt": "2022-09-07T23:23:51Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 181,
              "body": "Hmm, I don't think my comment was very helpful. Please allow me to try again :)\r\n\r\nIt's useful to note that TaskConfig does not encode all parameters required to run a task. (Listing them is also helpful: I believe this just includes the VDAF verification key and the collector HPKE config.)\r\n\r\nWhat's less useful here is saying that these MUST be exchanged out-of-band. It's best to reserve the keyword \"MUST\" for prescriptive things, e.g., \"If the client does X, then the server MUST do Y\". Here we're saying that there are fields that MUS be exchanged out-of-band, but we don't say how.\r\n\r\nI would be happy with something like this: \r\n\r\n> Note that `TaskConfig` does not encode all of the parameters required for the aggregator to run a task. In particular, the VDAF verification key, the collector HPKE configuration, and whatever assets are required for HTTP request authentication are still established out-of-band.\r\n\r\nSide note: Is the plan to to derive the VDAF verification key from the a shared secret on-the-fly?",
              "createdAt": "2022-09-07T23:33:22Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 210,
              "body": "I think so. If the goal of this extension is to do as much in-band provisioning as possible, then permitting flexibility here defeats the purpose because it requires the parties to agree, out-of-band, on the method for choosing the batch ID.\r\n\r\nAs has been pointed out, diversifying the task ID is important. One way to do this is to rely on the `task_info` to be unique across the entire deployment. Alternatively, we could add a nonce field to the TaskConfig, which the task author should fill with random bytes.",
              "createdAt": "2022-09-07T23:42:14Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            },
            {
              "originalPosition": 212,
              "body": "This subsection is not necessary, it's sufficient to just define the extension.\r\n\r\n",
              "createdAt": "2022-09-07T23:43:50Z",
              "updatedAt": "2022-09-07T23:44:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Bj_vj",
          "commit": {
            "abbreviatedOid": "de5a673"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-08T00:19:49Z",
          "updatedAt": "2022-09-08T00:19:49Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "let me move this to Security Considerations as a quoted comment, we can update/remove it when Security Considerations are fleshed out.",
              "createdAt": "2022-09-08T00:19:49Z",
              "updatedAt": "2022-09-08T00:19:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BkAP4",
          "commit": {
            "abbreviatedOid": "de5a673"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-08T00:24:29Z",
          "updatedAt": "2022-09-08T00:24:29Z",
          "comments": [
            {
              "originalPosition": 181,
              "body": "I see, let me update it.\r\n\r\nRe: vdaf_verify_key, I think our last conclusion was that if the leader chooses vdaf_verify_key, then the privacy leak threat already exists, generate it using a shared secret doesn't help, do we have consensus on this?",
              "createdAt": "2022-09-08T00:24:29Z",
              "updatedAt": "2022-09-08T00:24:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BkA4v",
          "commit": {
            "abbreviatedOid": "de5a673"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-08T00:30:20Z",
          "updatedAt": "2022-09-08T00:30:20Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I agree with the part that transparency in the form of \"client knows the parameters\" is true to vanilla DAP. \r\n\r\nBut what this extension adds is: the client's measurement will be aggregated using the parameters, because aggregators use these exact parameters to define a task. While in vanilla DAP, there's nothing stopping task authors from giving clients and helpers different parameters.",
              "createdAt": "2022-09-08T00:30:20Z",
              "updatedAt": "2022-09-08T00:30:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BkCVs",
          "commit": {
            "abbreviatedOid": "de5a673"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-08T00:43:57Z",
          "updatedAt": "2022-09-08T00:43:57Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "agreed. But I think the part that filters out polluted reports is still worthy calling out, let me move it to Implementation and Operational Considerations, I can delete it if you think that's clearer.",
              "createdAt": "2022-09-08T00:43:57Z",
              "updatedAt": "2022-09-08T00:43:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BoVgZ",
          "commit": {
            "abbreviatedOid": "5868a1b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-08T16:59:42Z",
          "updatedAt": "2022-09-08T16:59:42Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "That's definitely a useful property of this extension, and it should be called out in the intro. But I don't think it has to do with transparency.",
              "createdAt": "2022-09-08T16:59:42Z",
              "updatedAt": "2022-09-08T16:59:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BoWct",
          "commit": {
            "abbreviatedOid": "5868a1b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-09-08T17:02:03Z",
          "updatedAt": "2022-09-08T17:17:48Z",
          "comments": [
            {
              "originalPosition": 183,
              "body": "This should actually be a list of buckets. Plus, uint64_t is more useful for defining bucket boundaries.\r\n```suggestion\r\n        case Prio3Aes128Histogram: uint64 buckets<8, 2^16-8>;\r\n```",
              "createdAt": "2022-09-08T17:02:04Z",
              "updatedAt": "2022-09-08T17:17:48Z"
            },
            {
              "originalPosition": 174,
              "body": "```suggestion\r\nThe structure of the `vdaf_config` field is not specified in this document, instead it should be defined by\r\n```",
              "createdAt": "2022-09-08T17:02:58Z",
              "updatedAt": "2022-09-08T17:17:48Z"
            },
            {
              "originalPosition": 176,
              "body": "If we're going to spell out the structure for Prio3, we should be more declaritive.\r\n\r\n> For VDAFs specified in {{!VDAF}}, implementations SHOULD use the following structure:",
              "createdAt": "2022-09-08T17:06:23Z",
              "updatedAt": "2022-09-08T17:17:48Z"
            },
            {
              "originalPosition": 166,
              "body": "Here and below (and update VdafConfig to match)\r\n```suggestion\r\n    prio3-aes128-count(0x00000000),\r\n```",
              "createdAt": "2022-09-08T17:07:22Z",
              "updatedAt": "2022-09-08T17:17:48Z"
            },
            {
              "originalPosition": 189,
              "body": "That probably makes since, but it somewhat depends on the outcome of https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/94. Let's keep this issue open and add a reference to the VDAF issue.",
              "createdAt": "2022-09-08T17:09:56Z",
              "updatedAt": "2022-09-08T17:17:48Z"
            },
            {
              "originalPosition": 198,
              "body": "I think this extension should spell out derivation of the VDAF verification key, as this needs to be unique per task. Feel free to leave as an OPEN ISSUE in this PR.",
              "createdAt": "2022-09-08T17:11:07Z",
              "updatedAt": "2022-09-08T17:17:48Z"
            },
            {
              "originalPosition": 217,
              "body": "```suggestion\r\nTo offer the \"task-prov\" extension, the client adds the `TaskConfig` structure it received from the task author in the extensions field of its `Report`. It computes the task ID as described in {{construct-task-id}}.\r\n```",
              "createdAt": "2022-09-08T17:14:16Z",
              "updatedAt": "2022-09-08T17:17:48Z"
            },
            {
              "originalPosition": 220,
              "body": "> Task ID can be constructed\r\nfrom `task_info` and any other part of task configuration, as long as the\r\ngenerated task ID is determinstic and stay consistent across all parties. For\r\nexample, the task ID can be a SHA256 hash of the entire serialized\r\n`TaskConfig`. \r\n\r\nThe spec needs to be declaritive here. Instead of saying \"here's one way one might compute the task ID\", spell it out explicitly. For example:\r\n\r\n> When the \"task-prov\" extension is used, the task ID is computed as follows:\r\n> \r\n> ~~~\r\n> task_id = SHA-256(task_config)\r\n> ~~~\r\n\r\nwhere `task_config` is the payload of the extension sent by the client.",
              "createdAt": "2022-09-08T17:17:40Z",
              "updatedAt": "2022-09-08T17:17:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585BvmJo",
          "commit": {
            "abbreviatedOid": "c43ba75"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "What should an Aggregator do if the task ID does not match the hash of the task config? We'll need to spell this out in both the \"Leader Behavior\" and \"Helper Behavior\" sections.",
          "createdAt": "2022-09-09T23:24:54Z",
          "updatedAt": "2022-09-10T00:21:15Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "hmm, I'm not sure this is fair. In order to say that the extension improves security relative to vanilla DAP, you'd have to have a concrete mechanism to compare it to. In fact, by saying that tasks are configured \"out-of-band\", DAP is effectively saying nothing. Yet it's still possible for some DAP deployment to be just as secure as this extension. For example, imagine clients are configured with one and only one task; this is less useful, but no less secure.",
              "createdAt": "2022-09-09T23:24:54Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 105,
              "body": "```suggestion\r\n    can be found. Defined in I-D.draft-ietf-ppm-dap-02. */\r\n```",
              "createdAt": "2022-09-09T23:25:44Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 110,
              "body": "```suggestion\r\n    I-D.draft-ietf-ppm-dap-02. */\r\n```",
              "createdAt": "2022-09-09T23:25:51Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 123,
              "body": "```suggestion\r\n    for private use. */\r\n```",
              "createdAt": "2022-09-09T23:27:08Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 136,
              "body": "```suggestion\r\n        case fixed-size:     uint32 max_batch_size;\r\n```",
              "createdAt": "2022-09-09T23:27:52Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 149,
              "body": "Jusify paragraph to match bullet level. Also, the task ID is unconditionally derived from the task_config, right?\r\n```suggestion\r\n  string describing the purpose of this task.\r\n```",
              "createdAt": "2022-09-09T23:28:36Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 153,
              "body": "Justify paragraph to match bullet level. Also, I don't think this normative text makes sense, as we have not specified a VDAF \"initialiser\" anywhere. In any case, I don't think it's needed, so just delete it.\r\n```suggestion\r\n  chosen `vdaf_type`.\r\n```",
              "createdAt": "2022-09-09T23:31:02Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 159,
              "body": "```suggestion\r\n I-D.draft-irtf-cfrg-vdaf-03. */\r\n```",
              "createdAt": "2022-09-09T23:31:43Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 170,
              "body": "```suggestion\r\ninstead it needs to be defined by the VDAF itself. For VDAFs specified\r\n```",
              "createdAt": "2022-09-09T23:32:28Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 219,
              "body": "```suggestion\r\nconfiguration to clients. Therefore, a DAP task ID is not available to\r\n```",
              "createdAt": "2022-09-09T23:34:57Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 230,
              "body": "This paragraph seems to suggest that there might be some flexibility in how the task ID is derived. If that is the intent, can you say why this flexibility is needed/desirable? This protocol would be a lot simpler if we could just say \"the task ID is defined to be the SHA-256 hash of the task config\".",
              "createdAt": "2022-09-09T23:36:58Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 240,
              "body": "Worth point to the OPEN ISSUE above: this spec will spell out how this value is computed.",
              "createdAt": "2022-09-09T23:39:22Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 242,
              "body": "```suggestion\r\n## Change to upload sub-protocol\r\n```",
              "createdAt": "2022-09-09T23:39:45Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 246,
              "body": "Hmm, typically the core protocol would overrule behavior here. In particular it's typical to allow unrecognized extensions to be ignored and require that extensions be designed in such a way that they can be safely ignored. This isn't clear, so I raised https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/334.\r\n\r\nAssuming DAP says something like \"Aggregators MUST ignore unrecognized extensions and process the report as usual\", we would want to do something like this.\r\n```suggestion\r\n`extension_type`. If the leader does not support this extension, it MUST ignore it. In particular, if the task ID is not known, then it MUST abort the handshake with \"unrecognizedTask\".\r\n```\r\n\r\nOf course, it's possible that our derived task ID collides with a task ID known to the leader, which would cause the report to be processed with the incorrect VDAF. This is ugly, but not catastrophic, since it basically amounts to an attack on the robustness of the VDAF. (In other words the report will get rejected with overwhelming probability.)\r\n\r\nStill, we could guide implementations towards reducing the probability of a collision. Elsewhere we could add something like this:\r\n\r\n>  In order to reduce the probability of a collision, task authors SHOULD choose `task_info` so that it has high entropy.",
              "createdAt": "2022-09-09T23:44:11Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 274,
              "body": "```suggestion\r\n## Change to aggregate sub-protocol\r\n```",
              "createdAt": "2022-09-09T23:59:26Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 272,
              "body": "Can you elaborate more on \"position of the client in the batch of reports\"? Is there anything that the client learns from the error response that it couldn't compute on its own?",
              "createdAt": "2022-09-10T00:00:38Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 276,
              "body": "Then I think we can just get rid of this section.",
              "createdAt": "2022-09-10T00:00:57Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 286,
              "body": "Are changes actually needed? What's the goal here: to signal to the collector that the task hasn't been configured yet, but might eventually? Why is this useful?",
              "createdAt": "2022-09-10T00:02:49Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 297,
              "body": "I think this spec should spell out how the vdaf verify key is computed. Say explicitily what else is out-of-band (HTTP request auth assets, collector HPKE config)",
              "createdAt": "2022-09-10T00:04:02Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 304,
              "body": "Here again, let's assume that the Helper MUST ignore unrecognized extensions and make sure we spell out the Helper behavior in a way that make sure ignore this is safe.",
              "createdAt": "2022-09-10T00:05:34Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 304,
              "body": "Again: Let's assume that the Helper MUST ignore unrecognized extensions. See https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/334",
              "createdAt": "2022-09-10T00:06:16Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 321,
              "body": "Lots of this text is identical to the Leader's behavior. Can we try to de-duplicate it somehow? Perhaps we can add a subsection to the \"Extension\" section that describes this. Maybe call it \"Provisioning a Task\".",
              "createdAt": "2022-09-10T00:15:31Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 334,
              "body": "Better to have it toward the end.",
              "createdAt": "2022-09-10T00:16:19Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 339,
              "body": "this paragraph strikes me as a security consideration.",
              "createdAt": "2022-09-10T00:16:53Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 342,
              "body": "> streaming framework that has `groupBy` operator.\r\n\r\nThis is too vague. If you want to suggest a particular implementation strategy, then you'll need to elaborate more here.",
              "createdAt": "2022-09-10T00:17:52Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 348,
              "body": "I agree, changes to core DAP are likely warranted. However I think it's too early to suggest anything concrete, or even file an issue. I would make this paragraph an OPEN ISSUE.\r\n```suggestion\r\n> OPEN ISSUE: This mechanism brings added overhead in `Report` and `ReportShare` since more\r\n> duplicated data is passed around. Some optimisation can be done by sending only\r\n> one copy of extension in `AggregateInitializeReq`.\r\n```",
              "createdAt": "2022-09-10T00:19:17Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            },
            {
              "originalPosition": 359,
              "body": "How does this compare with vanilla DAP? For this property to hold, it's sufficient to ensure a 1:1 mapping from task ID to task config. This is already required by vanilla DAP, so I don't actually think we gain anything here.",
              "createdAt": "2022-09-10T00:20:55Z",
              "updatedAt": "2022-09-10T00:21:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B0hkp",
          "commit": {
            "abbreviatedOid": "c43ba75"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-12T14:51:21Z",
          "updatedAt": "2022-09-12T14:51:22Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "makes sense, let me reword this ",
              "createdAt": "2022-09-12T14:51:21Z",
              "updatedAt": "2022-09-12T14:51:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B0vns",
          "commit": {
            "abbreviatedOid": "3f20ab2"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-12T15:24:00Z",
          "updatedAt": "2022-09-12T15:24:00Z",
          "comments": [
            {
              "originalPosition": 272,
              "body": "I can't remember what I was worried about, let me delete this and add back later with example",
              "createdAt": "2022-09-12T15:24:00Z",
              "updatedAt": "2022-09-12T15:24:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B02Hg",
          "commit": {
            "abbreviatedOid": "3f20ab2"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-12T15:40:40Z",
          "updatedAt": "2022-09-12T15:40:40Z",
          "comments": [
            {
              "originalPosition": 304,
              "body": "what does \"ignore\" mean in this case? it should carry on preparing the shares as if task ID is already associated with an existing task? The current core protocol doesn't specify what happens in the aggregate-flow if the task ID is not recognized. Maybe we should specify that behaviour in the core protocol first, then we can simply see \"ignore\" in this extension.",
              "createdAt": "2022-09-12T15:40:40Z",
              "updatedAt": "2022-09-12T15:40:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B08yB",
          "commit": {
            "abbreviatedOid": "3f20ab2"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-12T15:58:12Z",
          "updatedAt": "2022-09-12T15:58:13Z",
          "comments": [
            {
              "originalPosition": 342,
              "body": "I don't think this paragraph is essential, let me remove this from the first draft and add details later",
              "createdAt": "2022-09-12T15:58:12Z",
              "updatedAt": "2022-09-12T15:58:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B2rOO",
          "commit": {
            "abbreviatedOid": "3f20ab2"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-12T21:23:04Z",
          "updatedAt": "2022-09-12T21:23:04Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "this is necessary because batch-validation in core protocol relies on various task parameters known at the time of receiving collectReq, the goal is to let leader have a chance to let collector know what happened, otherwise, how does leader check for e.g. min_batch_size",
              "createdAt": "2022-09-12T21:23:04Z",
              "updatedAt": "2022-09-12T21:23:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B3CZF",
          "commit": {
            "abbreviatedOid": "00eb8e3"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-12T23:34:09Z",
          "updatedAt": "2022-09-12T23:51:35Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "This section should define the term \"task author\" (introduced by this draft) and elaborate on its role. We can do so in follow-up PR.",
              "createdAt": "2022-09-12T23:34:10Z",
              "updatedAt": "2022-09-12T23:51:35Z"
            },
            {
              "originalPosition": 177,
              "body": "```suggestion\r\n        case prio3-aes128-histogram: uint64 buckets<8, 2^24-8>;\r\n```",
              "createdAt": "2022-09-12T23:35:39Z",
              "updatedAt": "2022-09-12T23:51:36Z"
            },
            {
              "originalPosition": 219,
              "body": "Declarative\r\n```suggestion\r\nconfiguration to clients. Therefore, clients, aggregators and collector\r\nconstruct the DAP task ID prior to uploading. A DAP task ID is computed as\r\n```",
              "createdAt": "2022-09-12T23:37:24Z",
              "updatedAt": "2022-09-12T23:51:36Z"
            },
            {
              "originalPosition": 240,
              "body": "Declaritive\r\n```suggestion\r\nIf the decoding succeeds, aggregator creates a new task using the task ID\r\n```",
              "createdAt": "2022-09-12T23:38:21Z",
              "updatedAt": "2022-09-12T23:51:36Z"
            },
            {
              "originalPosition": 264,
              "body": "No need to include this paragraph.\r\n```suggestion\r\n```",
              "createdAt": "2022-09-12T23:39:42Z",
              "updatedAt": "2022-09-12T23:51:36Z"
            },
            {
              "originalPosition": 286,
              "body": "Fair enough, but the following seems superfluous:\r\n\r\n> In this case the leader MAY respond with HTTP status code 404\r\n> Not Found and an error of type `unrecognizedTask`.\r\n\r\nIn vanilla DAP, if the task ID is not known, then the Leader is already required to abort with \"unrecognizedTask\". As far as I can tell, this text only changes the server behavior by allowing it to abort with 404 rather than the currently mandated 400.\r\n\r\n> The response MAY include a\r\n> Retry-After header field to suggest a pulling interval to the collector.\r\n\r\nThis seems fine, but a little odd. It seems like what you want to do here is distinguish between two cases:\r\n1. A collect request is made for a task that will exist eventually (once we get the first upload request pertaining to the task)\r\n2. A collect request is made for a task that will never exist\r\n\r\nBut how does the Leader know which of these is true, based on the information it has? ",
              "createdAt": "2022-09-12T23:49:28Z",
              "updatedAt": "2022-09-12T23:51:36Z"
            },
            {
              "originalPosition": 303,
              "body": "Fine to point to #334, but I think for this PR we should align the Helper's behavior with the Leader's. In particular we should say that it MUST ignore the extension.",
              "createdAt": "2022-09-12T23:50:37Z",
              "updatedAt": "2022-09-12T23:51:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B6sUT",
          "commit": {
            "abbreviatedOid": "00eb8e3"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T14:23:07Z",
          "updatedAt": "2022-09-13T14:23:08Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "It is defined in the Conventions and Definitions section:\r\n> : The entity that defines the parameters of a task.",
              "createdAt": "2022-09-13T14:23:07Z",
              "updatedAt": "2022-09-13T14:23:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B6tpU",
          "commit": {
            "abbreviatedOid": "00eb8e3"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T14:25:57Z",
          "updatedAt": "2022-09-13T14:25:57Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Sure, but we definitely need some \"flavor text\" to gently introduce the reader to this concept. We can worry about this later though :)",
              "createdAt": "2022-09-13T14:25:57Z",
              "updatedAt": "2022-09-13T14:25:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B6zzV",
          "commit": {
            "abbreviatedOid": "d215bc3"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T14:39:31Z",
          "updatedAt": "2022-09-13T14:39:32Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "that's a good point, we should probably aim to have collector behave the same in both cases. The core protocol today doesn't describe how leader response to a nonexistent task ID. The only `unrecognizedTask` error happens in hpke_config/ endpoint. I think the ideal solution could be the following:\r\n\r\n- if leader receive a nonexistent task ID, it must responses 404 and `unrecognizedTask`, it may include Retry-After header.\r\n- if collector gets 404 and `unrecognizedTask`, then it's up to collector to retry at a later time.\r\n\r\nIf this is specified in the core protocol, we can get rid of this collector section. thoughts? @cjpatton ",
              "createdAt": "2022-09-13T14:39:31Z",
              "updatedAt": "2022-09-13T14:39:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B7vS9",
          "commit": {
            "abbreviatedOid": "c43ba75"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T17:17:24Z",
          "updatedAt": "2022-09-13T17:17:24Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "I agree, it seems worth spelling this out in the core protocol, if it's not already. Would you mind sending a PR today? If not, I will do so.\r\n\r\nOne nit: Unless there's a specific reason why 404 is desirable, let's just go with 400, which is currently used for all aborts in DAP.",
              "createdAt": "2022-09-13T17:17:24Z",
              "updatedAt": "2022-09-13T17:19:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B7v3o",
          "commit": {
            "abbreviatedOid": "c43ba75"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T17:19:19Z",
          "updatedAt": "2022-09-13T17:19:19Z",
          "comments": [
            {
              "originalPosition": 304,
              "body": "If the Helper doesn't recognize the task ID, it's supposed to abort with \"unrecognizedTask\". Are you sure this isn't already spelled out?",
              "createdAt": "2022-09-13T17:19:19Z",
              "updatedAt": "2022-09-13T17:19:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B89fS",
          "commit": {
            "abbreviatedOid": "b3a9ac4"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T22:01:44Z",
          "updatedAt": "2022-09-13T22:01:44Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "I don't have a reason to use 404 but the current core protocol actually says it explicitly: https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/blob/main/draft-ietf-ppm-dap.md#hpke-configuration-request-hpke-config\r\n\r\n> If the aggregator does not recognize the task ID, then it responds with HTTP status code 404 Not Found and an error of type unrecognizedTask.",
              "createdAt": "2022-09-13T22:01:44Z",
              "updatedAt": "2022-09-13T22:01:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B8-Lc",
          "commit": {
            "abbreviatedOid": "b3a9ac4"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T22:05:42Z",
          "updatedAt": "2022-09-13T22:05:43Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "In the Errors table in the core protocol, it has this:\r\n> unrecognizedTask | An endpoint received a message with an unknown task ID.\r\n\r\nIs this considered \"spelled out\" (It doesn't actually say what HTTP status code to use)? If so, then there's nothing to be done.\r\n",
              "createdAt": "2022-09-13T22:05:42Z",
              "updatedAt": "2022-09-13T22:05:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585B9jtl",
          "commit": {
            "abbreviatedOid": "b3a9ac4"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is a great start, let's land this and continue iterating. I've filed a couple issues to start.",
          "createdAt": "2022-09-14T01:55:36Z",
          "updatedAt": "2022-09-14T01:56:22Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "Hmm, no you're right, I think it's worth spelling out wherever relevant in the text. (I thought that it was.) Please send a PR, if you have time!",
              "createdAt": "2022-09-14T01:55:36Z",
              "updatedAt": "2022-09-14T01:56:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CAOQx",
          "commit": {
            "abbreviatedOid": "b3a9ac4"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-14T12:08:29Z",
          "updatedAt": "2022-09-14T12:47:32Z",
          "comments": [
            {
              "originalPosition": 189,
              "body": "```suggestion\r\n{{?DAP=I-D.draft-ietf-ppm-dap-02}}.\r\n```",
              "createdAt": "2022-09-14T12:08:30Z",
              "updatedAt": "2022-09-14T16:43:29Z"
            },
            {
              "originalPosition": 145,
              "body": "```suggestion\r\nthat are useful for configuring a task in-band:\r\n```",
              "createdAt": "2022-09-14T12:10:46Z",
              "updatedAt": "2022-09-14T12:47:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CB8qn",
          "commit": {
            "abbreviatedOid": "b3a9ac4"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-14T16:02:11Z",
          "updatedAt": "2022-09-14T16:02:12Z",
          "comments": [
            {
              "originalPosition": 189,
              "body": "This draft isn't out yet, so we'll have to update this later :)",
              "createdAt": "2022-09-14T16:02:12Z",
              "updatedAt": "2022-09-14T16:02:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CCLs4",
          "commit": {
            "abbreviatedOid": "b3a9ac4"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-14T16:42:09Z",
          "updatedAt": "2022-09-14T16:42:10Z",
          "comments": [
            {
              "originalPosition": 189,
              "body": "Fair enough, I'm just not clear because there is a mixture of reference to DAP-01 and DAP-02. ",
              "createdAt": "2022-09-14T16:42:09Z",
              "updatedAt": "2022-09-14T16:42:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CCQ1l",
          "commit": {
            "abbreviatedOid": "b3a9ac4"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-14T16:57:03Z",
          "updatedAt": "2022-09-14T16:57:04Z",
          "comments": [
            {
              "originalPosition": 189,
              "body": "TOTALLY understandable! We were hoping to cut DAP-02 last week, but it looks like we'll merge this PR before then.",
              "createdAt": "2022-09-14T16:57:03Z",
              "updatedAt": "2022-09-14T16:57:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOH4FR584--iAv",
      "title": "Clean up TaskConfig definition",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/7",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Wrie `Dp` (short for diff. privacy) instead of `Privacy`. That way we don't end up conflating this (precise) definition of privacy with other definitions. (For example, in the DAP draft, \"privacy\" refers to an MPC-style definition.)\r\n\r\n- Write `Config` instead of `Params`, for consitency with `TaskConfig`, `QueryConfig`, and `VdafConfig`.\r\n\r\n- Lift `DpConfig` out of `VdafConfig` as these apply to two separable primitives that we are composing in this application.\r\n\r\n- Various editorial nits.",
      "createdAt": "2022-09-14T21:13:11Z",
      "updatedAt": "2022-09-15T19:47:09Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "6d5319bacf38115206557c3d07cd7ae0d0ec76c9",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/1",
      "headRefOid": "604b9e0abb356d1d7f603269c03fe65ece4a1dfd",
      "closedAt": "2022-09-15T19:47:08Z",
      "mergedAt": "2022-09-15T19:47:08Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "452b321adf39739ff3d192f514b5210a1f39187c"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> @cjpatton Why bringing DpConfig to TaskConfig, given that the exact mechanism is likely to be tied to a VDAF?\r\n\r\nFair point. I guess I was a bit confused about the requirements: If the expectation is that how we use DP is *always* VDAF-dependent, then this is a fair move; but there might be ways of applying central DP that apply to a large class of VDAFs (see https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/94). \r\n\r\nI've merged this back into vdaf_config. If at some point we want to lift this to task_config, we can do so in a way that's backwards compatible, since dp_config comprises the first bytes of vdaf_config.\r\n\r\n> DpConfig is not in the core protocol's out-of-band task configuration, if people wants to introduce a new Dp config and use it out-of-band, then it'll have to be aligned with the struct defined here.\r\n\r\nGood catch!\r\n\r\n",
          "createdAt": "2022-09-15T17:12:55Z",
          "updatedAt": "2022-09-15T17:12:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585CHQOp",
          "commit": {
            "abbreviatedOid": "239f68a"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-15T13:29:27Z",
          "updatedAt": "2022-09-15T13:29:28Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "nit: why prefer inlined comment?",
              "createdAt": "2022-09-15T13:29:27Z",
              "updatedAt": "2022-09-15T13:29:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CHQy4",
          "commit": {
            "abbreviatedOid": "239f68a"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Left some minor comments, mostly about missed renaming & reformatting.\r\n\r\n@cjpatton Why bringing DpConfig to TaskConfig, given that the exact mechanism is likely to be tied to a VDAF? DpConfig is not in the core protocol's out-of-band task configuration, if people wants to introduce a new Dp config and use it out-of-band, then it'll have to be aligned with the struct defined here.",
          "createdAt": "2022-09-15T13:30:46Z",
          "updatedAt": "2022-09-15T14:09:18Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "privacy_mechanism -> dp_mechanism\r\nPrivacyParams.privacy_mechanism -> DpConfig.dp_mechanism",
              "createdAt": "2022-09-15T13:30:46Z",
              "updatedAt": "2022-09-15T14:09:18Z"
            },
            {
              "originalPosition": 124,
              "body": "you missed `QueryType`",
              "createdAt": "2022-09-15T14:03:34Z",
              "updatedAt": "2022-09-15T14:09:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CH2_a",
          "commit": {
            "abbreviatedOid": "239f68a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-15T14:56:35Z",
          "updatedAt": "2022-09-15T14:56:36Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "It's easier to read, I think.",
              "createdAt": "2022-09-15T14:56:36Z",
              "updatedAt": "2022-09-15T14:56:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CJWCp",
          "commit": {
            "abbreviatedOid": "f3fe909"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-15T19:39:22Z",
          "updatedAt": "2022-09-15T19:39:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOH4FR584_Uovd",
      "title": "Flesh out some of the protocol details",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/9",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Clean up the introduction. Be sure to mention all the salient points, including that some artifacts are still negotiated out of batnd.\r\n\r\n- Spell out \"opt-in\" versus \"opt-out\" conditions. This makes the previous {{provisioning-a-task}} section more explicit and adds some additional features.\r\n\r\n- Formalize the language in the protocol behavior sections.\r\n\r\n- Add notes and an attack to security considerations.\r\n\r\n- Move max_bach_lifetime into QueryConfig, as this parameter constrains queries.\r\n\r\n- Various editorial things, including aligning with editorial changes in DAP-02.",
      "createdAt": "2022-09-21T05:50:05Z",
      "updatedAt": "2022-09-28T19:25:22Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "452b321adf39739ff3d192f514b5210a1f39187c",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/2/editorial",
      "headRefOid": "e984a753a3385d61c522740ea48f4925fbe4bc8f",
      "closedAt": "2022-09-28T19:25:21Z",
      "mergedAt": "2022-09-28T19:25:21Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "65e21d66f7cbd23c63e9c26a5318577841c3f965"
      },
      "comments": [
        {
          "author": "MichaelScaria",
          "authorAssociation": "NONE",
          "body": "LGTM! Love to see this.",
          "createdAt": "2022-09-23T23:07:12Z",
          "updatedAt": "2022-09-23T23:07:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585CepsU",
          "commit": {
            "abbreviatedOid": "d2c1b96"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-21T12:30:54Z",
          "updatedAt": "2022-09-21T12:30:54Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "question: what's the difference between ! and ? in this format? The vdaf one below is using ? \r\nIs there a standard doc I can refer to for this kind of formatting?",
              "createdAt": "2022-09-21T12:30:54Z",
              "updatedAt": "2022-09-21T12:31:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Cfrf-",
          "commit": {
            "abbreviatedOid": "d2c1b96"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-21T15:03:05Z",
          "updatedAt": "2022-09-21T15:03:06Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "\"!\" denotes \"normative\" reference; \"?\" denotes 'informative\" reference. If a reference is \"normative\", then it is effectively part of the spec.",
              "createdAt": "2022-09-21T15:03:06Z",
              "updatedAt": "2022-09-21T15:03:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Cetr5",
          "commit": {
            "abbreviatedOid": "d2c1b96"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Took a first pass, left some comments/questions, will take a deeper look later today.",
          "createdAt": "2022-09-21T12:41:59Z",
          "updatedAt": "2022-09-22T11:00:21Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "```suggestion\r\n  encrypt aggregate shares.\r\n```",
              "createdAt": "2022-09-21T12:42:00Z",
              "updatedAt": "2022-09-22T11:00:21Z"
            },
            {
              "originalPosition": 72,
              "body": "```suggestion\r\n* Any assets required for authenticating HTTP requests.\r\n```",
              "createdAt": "2022-09-21T12:42:09Z",
              "updatedAt": "2022-09-22T11:00:21Z"
            },
            {
              "originalPosition": 6,
              "body": "also am I right the only thing stopping use from using dap-02 and vdaf-03 is that those two are not officially cut yet?",
              "createdAt": "2022-09-21T12:46:59Z",
              "updatedAt": "2022-09-22T11:00:21Z"
            },
            {
              "originalPosition": 277,
              "body": "The task lifetime is to defined in this doc, how is this different from task_expiration?",
              "createdAt": "2022-09-21T12:57:14Z",
              "updatedAt": "2022-09-22T11:00:21Z"
            },
            {
              "originalPosition": 231,
              "body": "Have we concluded why deriving the verification key is better than leader chose one and share with helpers?",
              "createdAt": "2022-09-21T13:00:11Z",
              "updatedAt": "2022-09-22T11:00:21Z"
            },
            {
              "originalPosition": 409,
              "body": "```suggestion\r\nFinally, the Helper completes the aggregate initialize request as usual, deriving the VDAF\r\n```",
              "createdAt": "2022-09-21T13:05:29Z",
              "updatedAt": "2022-09-22T11:00:21Z"
            },
            {
              "originalPosition": 357,
              "body": "Is it even a goal for the collector to opt in/out? the previous text deliberately says no to that",
              "createdAt": "2022-09-21T14:45:50Z",
              "updatedAt": "2022-09-22T11:00:21Z"
            },
            {
              "originalPosition": 487,
              "body": "agree with alphabetizing",
              "createdAt": "2022-09-21T15:29:38Z",
              "updatedAt": "2022-09-22T11:00:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Cl_ox",
          "commit": {
            "abbreviatedOid": "d2c1b96"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-22T15:24:09Z",
          "updatedAt": "2022-09-22T15:28:34Z",
          "comments": [
            {
              "originalPosition": 231,
              "body": "This is a question about the security of the VDAF. We are working on a paper that will address this question; I will keep https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/issues/161 up-to-date.",
              "createdAt": "2022-09-22T15:24:09Z",
              "updatedAt": "2022-09-22T15:28:34Z"
            },
            {
              "originalPosition": 277,
              "body": "The task_expiration is what I'm referring to. The behavior described here is: \"A party MAY opt out if it thinks the task lives too long\". ",
              "createdAt": "2022-09-22T15:26:08Z",
              "updatedAt": "2022-09-22T15:28:34Z"
            },
            {
              "originalPosition": 357,
              "body": "Which text? The intent is that each party should opt in or out, including the Collector.",
              "createdAt": "2022-09-22T15:26:33Z",
              "updatedAt": "2022-09-22T15:28:34Z"
            },
            {
              "originalPosition": 487,
              "body": "Raised issue",
              "createdAt": "2022-09-22T15:28:28Z",
              "updatedAt": "2022-09-22T15:28:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CtCdX",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "MichaelScaria",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-23T22:57:31Z",
          "updatedAt": "2022-09-23T22:57:31Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "This should be \"2. \" right? ",
              "createdAt": "2022-09-23T22:57:31Z",
              "updatedAt": "2022-09-23T22:57:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CtCi-",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "MichaelScaria",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-23T22:58:36Z",
          "updatedAt": "2022-09-23T22:58:36Z",
          "comments": [
            {
              "originalPosition": 391,
              "body": "\"payload\" typo",
              "createdAt": "2022-09-23T22:58:36Z",
              "updatedAt": "2022-09-23T22:58:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CtCu4",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-23T23:00:55Z",
          "updatedAt": "2022-09-23T23:00:56Z",
          "comments": [
            {
              "originalPosition": 379,
              "body": "`make` renders this as an enumerated list (1, 2, 3, ...). Using \"1.\" to indicate an element of an enumerated list is better because you don't have to renumber the list when adding/removing items.",
              "createdAt": "2022-09-23T23:00:56Z",
              "updatedAt": "2022-09-23T23:00:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CtDEZ",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "MichaelScaria",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-23T23:05:02Z",
          "updatedAt": "2022-09-23T23:05:02Z",
          "comments": [
            {
              "originalPosition": 468,
              "body": "FWIW, we rate limit the number of \"tasks\" today.",
              "createdAt": "2022-09-23T23:05:02Z",
              "updatedAt": "2022-09-23T23:05:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585CtDQe",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "MichaelScaria",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-23T23:07:20Z",
          "updatedAt": "2022-09-23T23:07:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR585CyUEk",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-09-26T15:42:26Z",
          "updatedAt": "2022-09-26T21:39:58Z",
          "comments": [
            {
              "originalPosition": 178,
              "body": "Note this has been renamed to max_batch_query_count in core protocol.",
              "createdAt": "2022-09-26T15:42:26Z",
              "updatedAt": "2022-09-26T21:39:58Z"
            },
            {
              "originalPosition": 277,
              "body": "I think this is ambiguous with the sentence below, which says `A protocol participant MUST opt out if the task has expired.` but this sentence says a participant May opt out even if the task lives too long, but how long is too long? if it's longer than task_expiry then it conflicts with the MUST; if it's sometime before task_expiry then we should spell it out clearly.",
              "createdAt": "2022-09-26T15:46:46Z",
              "updatedAt": "2022-09-26T21:39:58Z"
            },
            {
              "originalPosition": 357,
              "body": "I meant the \"Collector Behaviour\" in main: \r\n\r\n> Collector should behave the same whether it supports `task-prov` extension or not\r\n\r\nWhat's the benefit of distinguishing between a retry of late task and a retry of a truly invalid task at the protocol level?",
              "createdAt": "2022-09-26T15:54:20Z",
              "updatedAt": "2022-09-26T21:39:59Z"
            },
            {
              "originalPosition": 399,
              "body": "```suggestion\r\ntask ID derived from the extension payload as defined in {{construct-task-id}}.\r\n```",
              "createdAt": "2022-09-26T15:57:48Z",
              "updatedAt": "2022-09-26T21:39:58Z"
            },
            {
              "originalPosition": 391,
              "body": "```suggestion\r\nNext, the Helper attempts to parse the extension payload. If parsing fails, it\r\n```",
              "createdAt": "2022-09-26T16:04:46Z",
              "updatedAt": "2022-09-26T21:39:58Z"
            },
            {
              "originalPosition": 379,
              "body": "```suggestion\r\n1. All report shares with the `task_prov` extension have the same extension payload. If\r\n```",
              "createdAt": "2022-09-26T16:05:57Z",
              "updatedAt": "2022-09-26T21:39:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C0J1k",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T22:12:13Z",
          "updatedAt": "2022-09-26T22:12:14Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "Yes, in the core protocol, client has nothing to lie about task provision, since task has been provisioned before client knows about it. I think the main point is malicious client who wants to send fake extension data will never be mixed with clients that have legitimate task configurations.",
              "createdAt": "2022-09-26T22:12:14Z",
              "updatedAt": "2022-09-26T22:12:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C0pXK",
          "commit": {
            "abbreviatedOid": "e984a75"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-27T01:26:51Z",
          "updatedAt": "2022-09-27T01:44:59Z",
          "comments": [
            {
              "originalPosition": 277,
              "body": "My understanding is that task_expiration is basically a timestamp. If this is so, then I don't think this is ambiguous, since the MAY applies to expiration dates in the future, whereas the MUST applies to expiration dates in the past.\r\n\r\nHowever there is another problem here. The goal of this MAY is to allow a party to opt-out if the task is going too long. There are two reasons why it might want to do this:\r\n1. Sanity checking: We want to make sure tasks don't live for 100s of years.\r\n2. For a given deployment of DAP, the parties might make an agreement that they will keep around metadata for anti-replay for as long as the task exists. In this case it would be useful to check that the task exists for, say, no longer than a week so that they don't have to keep around the metadata for longer than needed.\r\n\r\nIn either case, what's missing is the task's \"start time\". This is important because the Author might have created the task minutes or even hours before the Aggregators (in particular the Helper) sees the task for the first time.\r\n\r\nIf you agree this is needed, I'll add it to this PR.",
              "createdAt": "2022-09-27T01:26:51Z",
              "updatedAt": "2022-09-27T01:44:59Z"
            },
            {
              "originalPosition": 357,
              "body": "If a non-taskprov Collector sends a CollectReq and gets unrecognizedTask in response, then it's just supposed to quit, since it's expectation is that there's no point in the future where the Leader will be configured with the task. Instead, we're asking it to retry at some point in the future, but retrying is necessarily fruitless. Since Retry-After is typically handled \"under the hood\" by HTTP clients (in the reqwest crate for Rust, you have to explicitly override this), non-taskprov Collectors will appear to hang indefinitely here.\r\n\r\nThis can be avoided if the Collector has to explicitly opt-in.",
              "createdAt": "2022-09-27T01:39:11Z",
              "updatedAt": "2022-09-27T01:44:59Z"
            },
            {
              "originalPosition": 461,
              "body": "I see.  IMO this doesn't need to be called out in security considerations. In any case, we should try to clean this up. ",
              "createdAt": "2022-09-27T01:44:31Z",
              "updatedAt": "2022-09-27T01:44:59Z"
            },
            {
              "originalPosition": 468,
              "body": "Right, this TODO is asking us to spell out how to do this.",
              "createdAt": "2022-09-27T01:44:55Z",
              "updatedAt": "2022-09-27T01:44:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C0sLn",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-27T01:47:33Z",
          "updatedAt": "2022-09-27T01:47:33Z",
          "comments": [
            {
              "originalPosition": 468,
              "body": "We can do this later, no need to do it in this PR.",
              "createdAt": "2022-09-27T01:47:33Z",
              "updatedAt": "2022-09-27T01:47:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C2P_8",
          "commit": {
            "abbreviatedOid": "e984a75"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-27T08:24:22Z",
          "updatedAt": "2022-09-27T08:24:22Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "If it doesn't add anything to security considerations, I'm fine deleting this paragraph",
              "createdAt": "2022-09-27T08:24:22Z",
              "updatedAt": "2022-09-27T08:24:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C2d2E",
          "commit": {
            "abbreviatedOid": "e984a75"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-27T08:54:44Z",
          "updatedAt": "2022-09-27T08:54:49Z",
          "comments": [
            {
              "originalPosition": 357,
              "body": "The leader can choose not to send retry-after header if it hasn't opt-in to task_prov, collector will just get unrecognizedTask and quit, the task_prov process happens inside leader/helper, so it should be sufficient for leader to decide whether a retry-after should be given to a collector.\r\n",
              "createdAt": "2022-09-27T08:54:44Z",
              "updatedAt": "2022-09-27T08:54:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C4Yhf",
          "commit": {
            "abbreviatedOid": "e984a75"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-27T14:11:58Z",
          "updatedAt": "2022-09-27T14:11:58Z",
          "comments": [
            {
              "originalPosition": 277,
              "body": "for case1, isn't the task_expiration sufficient? I'm not convinced a start time is the solution but I'm curious how this start time looks like, perhaps we can keep the current PR text and create another PR to address this?",
              "createdAt": "2022-09-27T14:11:58Z",
              "updatedAt": "2022-09-27T14:11:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C4w5E",
          "commit": {
            "abbreviatedOid": "d2c1b96"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-27T15:04:18Z",
          "updatedAt": "2022-09-27T15:04:19Z",
          "comments": [
            {
              "originalPosition": 277,
              "body": "> for case1, isn't the task_expiration sufficient?\r\n\r\nDeciding whether a task has a lifetime of at least 200 years, I would subtract task_start from task_expiration and see if the duration is > 200 years. We can't do this correctly without knowing task_start.\r\n\r\n> I'm not convinced a start time is the solution but I'm curious how this start time looks like, perhaps we can keep the current PR text and create another PR to address this?\r\n\r\nSure, makes sense! Raised https://github.com/wangshan/draft-wang-ppm-dap-taskprov/issues/12",
              "createdAt": "2022-09-27T15:04:18Z",
              "updatedAt": "2022-09-27T15:04:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C4yil",
          "commit": {
            "abbreviatedOid": "d2c1b96"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-27T15:08:05Z",
          "updatedAt": "2022-09-27T15:08:05Z",
          "comments": [
            {
              "originalPosition": 357,
              "body": "How does the collector know that the task is definitely never going to exist? Remember, the intention of this retry-after mechanism is to allow the Leader to keep the Collector on the phone in case the task gets configured in the near future. If a taskprov Leader can't distinguish whether the Collector is taskprov or non-taskprov, it either has to ignore this SHOULD or risk keeping a non-taskprov Collector in an indefinite retry-after loop.\r\n\r\nTBH, I would be happy to avoid this complexity by dropping the retry-after behavior altogether, at least until we can implement it unambiguously. If we keep it, then let's also keep the OPEN ISSUE.\r\n\r\n",
              "createdAt": "2022-09-27T15:08:05Z",
              "updatedAt": "2022-09-27T15:09:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C4ywc",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-27T15:08:31Z",
          "updatedAt": "2022-09-27T15:08:31Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "Ack, I'll leave as-is, we can clean up later.",
              "createdAt": "2022-09-27T15:08:31Z",
              "updatedAt": "2022-09-27T15:08:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585C42tk",
          "commit": {
            "abbreviatedOid": "d5481f6"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-27T15:16:55Z",
          "updatedAt": "2022-09-27T15:16:55Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "https://github.com/wangshan/draft-wang-ppm-dap-taskprov/issues/13",
              "createdAt": "2022-09-27T15:16:55Z",
              "updatedAt": "2022-09-27T15:16:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585DAkuq",
          "commit": {
            "abbreviatedOid": "e984a75"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-28T19:05:17Z",
          "updatedAt": "2022-09-28T19:05:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOH4FR584_2J5s",
      "title": "Editorial: Use _ isntead of -",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/14",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address issue https://github.com/wangshan/draft-wang-ppm-dap-taskprov/issues/8",
      "createdAt": "2022-09-29T10:52:16Z",
      "updatedAt": "2022-09-29T14:54:29Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "65e21d66f7cbd23c63e9c26a5318577841c3f965",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "use-underscore-enum",
      "headRefOid": "831faf78ba94db5821e29c752b3eaac1d6a402d9",
      "closedAt": "2022-09-29T14:54:29Z",
      "mergedAt": "2022-09-29T14:54:28Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "3cf29d7f531e4096fb9a138663b07f76c596e9fc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585DFT6n",
          "commit": {
            "abbreviatedOid": "831faf7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-29T14:54:24Z",
          "updatedAt": "2022-09-29T14:54:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOH4FR584_2Ljq",
      "title": "List contributors in alphabetical order",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/15",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses issue https://github.com/wangshan/draft-wang-ppm-dap-taskprov/issues/10",
      "createdAt": "2022-09-29T10:58:43Z",
      "updatedAt": "2022-09-29T14:55:19Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "65e21d66f7cbd23c63e9c26a5318577841c3f965",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "alphabetical-contributors",
      "headRefOid": "a14fd4a666cdec8de2f52e00dbba70da22b6839e",
      "closedAt": "2022-09-29T14:55:19Z",
      "mergedAt": "2022-09-29T14:55:19Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "40eaec901ec5fe2c04492ec17ce0926827edec5f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585DFUR_",
          "commit": {
            "abbreviatedOid": "a14fd4a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-29T14:55:14Z",
          "updatedAt": "2022-09-29T14:55:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOH4FR584_2OvE",
      "title": "Upgrade to DAP-02",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/16",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses issue https://github.com/wangshan/draft-wang-ppm-dap-taskprov/issues/5",
      "createdAt": "2022-09-29T11:09:04Z",
      "updatedAt": "2022-09-29T14:54:54Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "65e21d66f7cbd23c63e9c26a5318577841c3f965",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "update-to-dap-02",
      "headRefOid": "e6a743b9e2e3b4d20d085f0152d8158165e766ce",
      "closedAt": "2022-09-29T14:54:54Z",
      "mergedAt": "2022-09-29T14:54:54Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "f8b82d0895b31d648c87b265c333cc631f49b1f6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585DFUGg",
          "commit": {
            "abbreviatedOid": "e6a743b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-29T14:54:49Z",
          "updatedAt": "2022-09-29T14:54:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOH4FR584_5XiA",
      "title": "Make select branch variable name unique",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/17",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This maps well to any union based structs in implementation",
      "createdAt": "2022-09-29T23:55:12Z",
      "updatedAt": "2022-09-30T11:30:32Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "40eaec901ec5fe2c04492ec17ce0926827edec5f",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "unique-select-variable-name",
      "headRefOid": "b29a67caa6a5617f6706606ae41de1e8eb7776fb",
      "closedAt": "2022-09-30T11:30:32Z",
      "mergedAt": "2022-09-30T11:30:32Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "5eb0ba3c7ac9b3c1498e953da233f0c3e5233faa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585DHyim",
          "commit": {
            "abbreviatedOid": "5bba594"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-30T00:05:28Z",
          "updatedAt": "2022-09-30T00:05:29Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "No objection, but I think this is too verbose. In fact, the following is valid (and preferable I think):\r\n```suggestion\r\n        case prio3_aes128_sum: uint8; /* bit length of the summand */\r\n        case prio3_aes128_histogram: uint64<8..2^24-8>; /* bucket boundaries */\r\n        case poplar1_aes128: uint16; /* bit length of input string */\r\n```",
              "createdAt": "2022-09-30T00:05:28Z",
              "updatedAt": "2022-09-30T00:05:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585DHzAL",
          "commit": {
            "abbreviatedOid": "b29a67c"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-30T00:09:42Z",
          "updatedAt": "2022-09-30T00:09:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOH4FR585ALY5u",
      "title": "Merge pollution security considerations",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/18",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #13.",
      "createdAt": "2022-10-05T02:28:02Z",
      "updatedAt": "2022-10-05T22:29:36Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "5eb0ba3c7ac9b3c1498e953da233f0c3e5233faa",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/13",
      "headRefOid": "8b959e2c9b91bd3c06601cb2b9992158e3917571",
      "closedAt": "2022-10-05T22:29:35Z",
      "mergedAt": "2022-10-05T22:29:35Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "fb3e83d59a63612d851a4eb6ffe9facf3853f514"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585Deq4e",
          "commit": {
            "abbreviatedOid": "8b959e2"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think the text looks good. But I'm not sure about the suggested mitigation in TODO. happy to approve and figure out proper mitigation later",
          "createdAt": "2022-10-05T22:24:57Z",
          "updatedAt": "2022-10-05T22:25:58Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "@cjpatton I'm not sure limiting number of tasks mitigate this risk. If malicious clients creates enough bad tasks, wouldn't they still achieve DOS since no new tasks can be created now.",
              "createdAt": "2022-10-05T22:24:57Z",
              "updatedAt": "2022-10-05T22:25:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Deroi",
          "commit": {
            "abbreviatedOid": "8b959e2"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T22:29:31Z",
          "updatedAt": "2022-10-05T22:29:31Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "good point",
              "createdAt": "2022-10-05T22:29:31Z",
              "updatedAt": "2022-10-05T22:29:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOH4FR585ALhJR",
      "title": "Use HKDF to extract task ID and VDAF verify key",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/19",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #4.",
      "createdAt": "2022-10-05T03:14:18Z",
      "updatedAt": "2022-10-05T22:30:03Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "5eb0ba3c7ac9b3c1498e953da233f0c3e5233faa",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/4",
      "headRefOid": "2516f374c21705b18f07bfc271655a94dbc1e47f",
      "closedAt": "2022-10-05T22:30:03Z",
      "mergedAt": "2022-10-05T22:30:03Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "95e36371898d77592993d6c5ae1ce92aa697e7fc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585Dephc",
          "commit": {
            "abbreviatedOid": "2516f37"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-10-05T22:16:44Z",
          "updatedAt": "2022-10-05T22:16:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOH4FR585AQDDT",
      "title": "Editorial changes",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/20",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-05T22:58:32Z",
      "updatedAt": "2022-10-05T23:40:27Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "95e36371898d77592993d6c5ae1ce92aa697e7fc",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "editorial-for-draft00",
      "headRefOid": "52a3739cb6fc38008a84d1a4867a3c0c85178e55",
      "closedAt": "2022-10-05T23:40:27Z",
      "mergedAt": "2022-10-05T23:40:27Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "65b4eac4e13d3854e39ce32562ac495821bf29c6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585DewZ1",
          "commit": {
            "abbreviatedOid": "52a3739"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T23:00:00Z",
          "updatedAt": "2022-10-05T23:00:00Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I thought this helps markdown rendering, apparently not",
              "createdAt": "2022-10-05T23:00:00Z",
              "updatedAt": "2022-10-05T23:00:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585DeykO",
          "commit": {
            "abbreviatedOid": "52a3739"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-05T23:15:41Z",
          "updatedAt": "2022-10-05T23:15:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOH4FR585AWzNS",
      "title": "Address global HPKE config - Issue #11",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/21",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-06T23:59:39Z",
      "updatedAt": "2022-10-12T17:04:32Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "643b54c498a60b6e3c7b79f14212d25fb4696d73",
      "headRepository": "junyechen1996/draft-wang-ppm-dap-taskprov",
      "headRefName": "junyec/global-hpke-config",
      "headRefOid": "653cacaf60c998680ff79a9a00e961d79ad6f4a1",
      "closedAt": "2022-10-12T17:04:32Z",
      "mergedAt": "2022-10-12T17:04:32Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "3dfa8a993eb134c1b79e0c2b202e75d456e4e131"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm not sure \"SHOULD use a global config\" is the right guidance. It's possible that a single Aggregator would support taskprov tasks as well as non-taskprov tasks. Indeed, an Aggregator might want to be able to enforce key separation between tasks that are provisioned by taskprov and those that are not. Perhaps we can try to be more specific about this guidance?\r\n\r\nI added some text to recommend an Aggregator \"MAY continue to support per-task HPKE configurations for other tasks that are configured out-of-band\". Let me know if this makes things clearer.\r\n\r\n> \r\n> Another more minor issue: An Aggregator might want to periodically rotate the HPKE config it advertises to taskprov Clients.\r\n\r\nI think this can be up to the Aggregator, because key rotation needs to happen for per-task HPKE config as well. I can add some text to recommend key rotation though, let me know what you think.",
          "createdAt": "2022-10-07T03:30:18Z",
          "updatedAt": "2022-10-07T03:30:18Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "I just squashed all commits into one.",
          "createdAt": "2022-10-12T04:17:00Z",
          "updatedAt": "2022-10-12T04:17:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585DlCB2",
          "commit": {
            "abbreviatedOid": "f997686"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I'm not sure \"SHOULD use a global config\" is the right guidance. It's possible that a single Aggregator would support taskprov tasks as well as non-taskprov tasks. Indeed, an Aggregator might want to be able to enforce key separation between tasks that are provisioned by taskprov and those that are not. Perhaps we can try to be more specific about this guidance?\r\n\r\nAnother more minor issue: An Aggregator might want to periodically rotate the HPKE config it advertises to taskprov Clients.",
          "createdAt": "2022-10-07T01:03:34Z",
          "updatedAt": "2022-10-07T01:13:48Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nsending reports. (See HPKE Configuration Request in\r\n```",
              "createdAt": "2022-10-07T01:03:34Z",
              "updatedAt": "2022-10-07T01:12:13Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nSHOULD support a global HPKE configuration independent of the task ID, because\r\n```",
              "createdAt": "2022-10-07T01:05:23Z",
              "updatedAt": "2022-10-07T01:12:13Z"
            },
            {
              "originalPosition": 5,
              "body": "editorial: I suggest reworking this so that all of the motivation is in the first paagragh, then all normative text follows:\r\n\r\n> Clients need to know the HPKE configuration prior to uploading reports, but ...\r\n>\r\n> To mitigate this issue, Aggregators SHOULD ...\r\n>\r\n> In addition, Clients SHOULD NOT ...",
              "createdAt": "2022-10-07T01:07:52Z",
              "updatedAt": "2022-10-07T01:12:39Z"
            },
            {
              "originalPosition": 15,
              "body": "There is no reason to repeat the endpoint format here. The more we can refer to the DAP draft as the source of truth, the better.",
              "createdAt": "2022-10-07T01:08:40Z",
              "updatedAt": "2022-10-07T01:12:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585DlViM",
          "commit": {
            "abbreviatedOid": "f997686"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-07T03:26:51Z",
          "updatedAt": "2022-10-07T03:26:51Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Good point, there are three paragraphs now: 1. describe the issue of specifying `task_id` in `/hpke_config`, 2. Aggregator's recommended behavior, 3. Client's recommended behavior.",
              "createdAt": "2022-10-07T03:26:51Z",
              "updatedAt": "2022-10-07T03:30:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Dv5ah",
          "commit": {
            "abbreviatedOid": "5f27d13"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-11T00:12:14Z",
          "updatedAt": "2022-10-11T00:23:11Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "It's best to avoid writing text that refers to specific constructions in the base protocol. Suppose for example that the core protocol changed the endpoint to `/get_that_cool_hpke_config`: Then we would have to update this reference in-kind. My suggestion avoids this.\r\n```suggestion\r\n`task_prov` extension, if a Client requests the Aggregator's HPKE configuration\r\nwith the task ID computed as described in {{construct-task-id}}, the\r\n```",
              "createdAt": "2022-10-11T00:12:14Z",
              "updatedAt": "2022-10-11T00:23:11Z"
            },
            {
              "originalPosition": 23,
              "body": "I think the reason is clear at this point.\r\n\r\n```suggestion\r\n`/hpke_config` endpoint.\r\n```",
              "createdAt": "2022-10-11T00:13:10Z",
              "updatedAt": "2022-10-11T00:23:11Z"
            },
            {
              "originalPosition": 16,
              "body": "Re: https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/21#issuecomment-1271070699\r\n\r\nThe problem is the guidance \"SHOULD support a global HPKE configuration\". We don't want to limit the Aggregator to just one configuration, for the following reasons:\r\n1. It may want to support multiple HPKE cipher suites (say, X25519 and P256)\r\n2. It may want to support multiple HPKE keys at the same time (say, to account for clients that may have used an older config)\r\n\r\nSomething like this might be better: \"SHOULD choose which HPKE configuration to advertise to clients independent of the task ID.\"",
              "createdAt": "2022-10-11T00:16:52Z",
              "updatedAt": "2022-10-11T00:23:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Dzq0n",
          "commit": {
            "abbreviatedOid": "5f27d13"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-11T14:30:51Z",
          "updatedAt": "2022-10-11T14:30:51Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Also changed `/hpke_config` to \"when requesting the HPKE configuration from an Aggregator\".",
              "createdAt": "2022-10-11T14:30:51Z",
              "updatedAt": "2022-10-11T14:30:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585DzsJy",
          "commit": {
            "abbreviatedOid": "5f27d13"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-11T14:33:35Z",
          "updatedAt": "2022-10-11T14:33:35Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I see, I didn't realize that is not clear. Maybe we should avoid the phrase \"a global HPKE configuration\".\r\n\r\nI applied your suggestion, and also updated the title of this section to `Supporting HPKE Configurations Independent of Tasks {#hpke-config-no-task-id}`. Let me know if that doesn't make sense.",
              "createdAt": "2022-10-11T14:33:35Z",
              "updatedAt": "2022-10-11T14:33:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585Dz3hT",
          "commit": {
            "abbreviatedOid": "5c4fb9c"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks good, just a couple more nits.",
          "createdAt": "2022-10-11T14:57:30Z",
          "updatedAt": "2022-10-11T14:58:29Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nthe `task_prov` extension, if a Client requests the Aggregator's HPKE configuration\r\n```",
              "createdAt": "2022-10-11T14:57:30Z",
              "updatedAt": "2022-10-11T14:58:29Z"
            },
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nIn addition, if a Client wants to include the `task_prov` extension in its report,\r\n```",
              "createdAt": "2022-10-11T14:58:11Z",
              "updatedAt": "2022-10-11T14:58:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585D1jF3",
          "commit": {
            "abbreviatedOid": "912b64f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'd suggest squashing all of the commits into one before merging.",
          "createdAt": "2022-10-11T20:25:10Z",
          "updatedAt": "2022-10-11T20:25:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 22,
      "id": "PR_kwDOH4FR585AmwBV",
      "title": "Editorial: Run spell checker and make art fit in 72 chars",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/22",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-11T22:32:34Z",
      "updatedAt": "2022-10-11T23:22:41Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "65b4eac4e13d3854e39ce32562ac495821bf29c6",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/editorial/2",
      "headRefOid": "9c92e2bd6aab16bd7570b5fbbeba7f90812d259c",
      "closedAt": "2022-10-11T23:22:40Z",
      "mergedAt": "2022-10-11T23:22:40Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "643b54c498a60b6e3c7b79f14212d25fb4696d73"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585D1_2U",
          "commit": {
            "abbreviatedOid": "6e41cda"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-11T22:33:25Z",
          "updatedAt": "2022-10-11T22:33:25Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Reviewer note: This change and the ones below it ensure that the \"art\" (the stuff between the \"~~~\") all fits in 72  columns. This improves rendering to text and html.",
              "createdAt": "2022-10-11T22:33:25Z",
              "updatedAt": "2022-10-11T22:33:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585D2GWM",
          "commit": {
            "abbreviatedOid": "9c92e2b"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-11T23:16:54Z",
          "updatedAt": "2022-10-11T23:16:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "PR_kwDOH4FR585BTwWI",
      "title": "Fix an inaccurate comment",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/24",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "QueryConfig is defined in this spec, not DAP-02.\r\n\r\nThanks to @bhalleycf for flagging.",
      "createdAt": "2022-10-21T19:17:05Z",
      "updatedAt": "2022-10-24T23:10:16Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "3dfa8a993eb134c1b79e0c2b202e75d456e4e131",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/editorial/3",
      "headRefOid": "6810164c9cf7fef9f3d6fddd54dce833d052c417",
      "closedAt": "2022-10-22T01:03:01Z",
      "mergedAt": "2022-10-22T01:03:01Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "c5ff4f8a0410923c7ff827d0c6641efddd719091"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585EpbDv",
          "commit": {
            "abbreviatedOid": "6810164"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-22T00:59:39Z",
          "updatedAt": "2022-10-22T00:59:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 25,
      "id": "PR_kwDOH4FR585BUkYT",
      "title": "Handle unrecognized VDAFs or DP mechanisms as \"invalidTask\"",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/25",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #23.\r\n\r\nTo do so, we need to ensure that VdafConfig and DpConfig can always be parsed properly.",
      "createdAt": "2022-10-22T00:34:27Z",
      "updatedAt": "2024-10-03T22:31:06Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "7ffa937d6ea20b85b7d7d944dd439009382fa9d9",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/23/1",
      "headRefOid": "33785bf3efb272236bacaaf5203ed50b3a555be6",
      "closedAt": "2022-11-14T20:44:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 26,
      "id": "PR_kwDOH4FR585BUlU0",
      "title": "Use \"dap-taskprov\" for the salt constant",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/26",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "We use \"dap-taskprov-00\" right now, the idea being that we would revise this to \"dap-taskprov-01\" for the next draft. Shan suggests this might end up being a footgun when we have to update to the next draft.",
      "createdAt": "2022-10-22T00:38:52Z",
      "updatedAt": "2022-10-24T23:10:17Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "3dfa8a993eb134c1b79e0c2b202e75d456e4e131",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/taskprov-01/1",
      "headRefOid": "c4fa71f87826b4786dd9f26729da951e39588680",
      "closedAt": "2022-10-22T01:36:45Z",
      "mergedAt": "2022-10-22T01:36:45Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "f5967d68f853640087864bbbb76512d08fc4a760"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585EpaFP",
          "commit": {
            "abbreviatedOid": "c4fa71f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T00:39:43Z",
          "updatedAt": "2022-10-22T00:39:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I have no objection to this change. If we need a hard-break between versions, then we can always update the extension codepoint.",
              "createdAt": "2022-10-22T00:39:43Z",
              "updatedAt": "2022-10-22T00:39:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585EpbCe",
          "commit": {
            "abbreviatedOid": "c4fa71f"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-22T00:58:58Z",
          "updatedAt": "2022-10-22T00:58:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDOH4FR585BUmK5",
      "title": "Use SHA-256() for deriving the task ID",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/27",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "",
      "createdAt": "2022-10-22T00:51:12Z",
      "updatedAt": "2024-10-03T22:31:08Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "f5967d68f853640087864bbbb76512d08fc4a760",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/taskprov-01/2",
      "headRefOid": "a95f6375f2c1f44c494fadf6cb314db32f9a3eaa",
      "closedAt": "2022-10-24T14:44:16Z",
      "mergedAt": "2022-10-24T14:44:16Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "7ffa937d6ea20b85b7d7d944dd439009382fa9d9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585Epa02",
          "commit": {
            "abbreviatedOid": "50117f5"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-22T00:58:09Z",
          "updatedAt": "2022-10-22T00:58:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOH4FR585BUmUv",
      "title": "QueryConfig: Move type byte to just before variant",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/28",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "This allows us to avoid matching on the type byte more than once in code.",
      "createdAt": "2022-10-22T00:53:52Z",
      "updatedAt": "2022-10-25T00:07:08Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "3dfa8a993eb134c1b79e0c2b202e75d456e4e131",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/taskprov-01/3",
      "headRefOid": "a1572aba79c36b67bf25098462320fcb2a75e5b2",
      "closedAt": "2022-10-22T01:36:29Z",
      "mergedAt": "2022-10-22T01:36:29Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "ab2062e99764d646571e56595070aca8a103dd58"
      },
      "comments": [
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "this is reverted",
          "createdAt": "2022-10-24T23:47:38Z",
          "updatedAt": "2022-10-24T23:47:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585Epaul",
          "commit": {
            "abbreviatedOid": "a1572ab"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T00:54:52Z",
          "updatedAt": "2022-10-22T00:54:53Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Thanks to @bhalleycf for pointing this awkwardness out.",
              "createdAt": "2022-10-22T00:54:53Z",
              "updatedAt": "2022-10-22T00:54:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585EpbGs",
          "commit": {
            "abbreviatedOid": "a1572ab"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-22T01:01:06Z",
          "updatedAt": "2022-10-22T01:01:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOH4FR585LoNnw",
      "title": "Align taskprov with latest DAP draft",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/30",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "* Bump references to draft-ietf-ppm-dap-02 to 04\r\n\r\n* Bump references to draft-irtf-cfrg-vdaf-03 to 05\r\n\r\n* The latest DAP draft drops metadata extensions in favor of per-Aggregator extensions included in the report shares. These new extensions are not well-suited for shared extensions, since we end up blowing up communication cost by transmitting the task configuration twice in the same report.\r\n\r\n  Including the task configuration in the extensions has another problem: All reports include it, which means it is necessary for the Helper to check that each report in an aggregation job includes the exact same copy of this extension. This adds unnecessary complexity to the spec.\r\n\r\n  We solve these problems by advertising the task configuration in a header: The Client includes it in its upload request to he Helper, and the Leader includes it in the first aggregate request incident to the task.\r\n\r\n* Remove a security consideration about HKDF that no longer applies since we're using SHA-256 for task ID derivation.\r\n\r\n* Minor editorial nits.",
      "createdAt": "2023-03-09T03:55:12Z",
      "updatedAt": "2024-10-03T22:31:04Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "d44c0d7199ea044bd1d785bfbb0a6ae4202be69c",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/dap-04/1",
      "headRefOid": "ee69f296c3dd8f7a3272733933f30ecda1ba29bf",
      "closedAt": "2023-03-13T17:48:54Z",
      "mergedAt": "2023-03-13T17:48:54Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "b6f61ed914177e3ce3bb6c76873261e4dc70ff92"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Note: Tests will fail until we have cut VDAF-05 and DAP-04. ",
          "createdAt": "2023-03-09T03:59:15Z",
          "updatedAt": "2023-03-09T03:59:15Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Pushed a couple of formatting issues.",
          "createdAt": "2023-03-13T17:48:09Z",
          "updatedAt": "2023-03-13T17:48:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585PmJZC",
          "commit": {
            "abbreviatedOid": "a717f59"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-10T18:27:28Z",
          "updatedAt": "2023-03-10T18:27:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOH4FR585PuRFN",
      "title": "Require advertisement in each request",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/32",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #31.\r\n\r\nThis addresses an operational consideration that is described in a new section.",
      "createdAt": "2023-05-03T23:43:42Z",
      "updatedAt": "2024-10-03T22:31:03Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "b6f61ed914177e3ce3bb6c76873261e4dc70ff92",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/31/1",
      "headRefOid": "11631974db376c3e42a564a249c8397123ca567c",
      "closedAt": "2023-05-04T15:27:43Z",
      "mergedAt": "2023-05-04T15:27:42Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "73859696afcf7a1ddfdcb83de3632e7d1152c327"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry about all the typos!",
          "createdAt": "2023-05-04T00:03:10Z",
          "updatedAt": "2023-05-04T00:03:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585UKi6S",
          "commit": {
            "abbreviatedOid": "137bb92"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-03T23:45:34Z",
          "updatedAt": "2023-05-03T23:49:13Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nthe Helper as described in {{definition}}.\r\n```",
              "createdAt": "2023-05-03T23:45:34Z",
              "updatedAt": "2023-05-03T23:49:13Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nand process the aggregate request as usual. In particular, if the Helper does\r\n```",
              "createdAt": "2023-05-03T23:46:23Z",
              "updatedAt": "2023-05-03T23:49:13Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\nindividual task configurations long-term. Because the task configuration is\r\n```",
              "createdAt": "2023-05-03T23:47:17Z",
              "updatedAt": "2023-05-03T23:49:13Z"
            },
            {
              "originalPosition": 69,
              "body": "```suggestion\r\nOnce an Aggregator has opted-in to a task, the expectation is that the task is\r\n```",
              "createdAt": "2023-05-03T23:48:02Z",
              "updatedAt": "2023-05-03T23:49:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585UN7Lu",
          "commit": {
            "abbreviatedOid": "1163197"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-04T12:00:17Z",
          "updatedAt": "2023-05-04T15:02:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOH4FR585ZncTN",
      "title": "Align with draft-ietf-ppm-dap-06",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/38",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #37.\r\nCloses #33.",
      "createdAt": "2023-09-05T21:43:49Z",
      "updatedAt": "2024-10-03T22:31:02Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "73859696afcf7a1ddfdcb83de3632e7d1152c327",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/dap-06",
      "headRefOid": "5249e3728e1543a6f91b309a6f156811aae1927f",
      "closedAt": "2023-09-07T15:29:52Z",
      "mergedAt": "2023-09-07T15:29:52Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "79469b20654785cdcb66cd2e76fdc07b1d7b4953"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585gQMZq",
          "commit": {
            "abbreviatedOid": "5249e37"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me!",
          "createdAt": "2023-09-07T08:24:08Z",
          "updatedAt": "2023-09-07T08:24:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 40,
      "id": "PR_kwDOH4FR585bkwM4",
      "title": "Align with draft-ietf-ppm-dap-07",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/40",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "* Update dap version to 07\r\n* Reverted a change in https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/38, because non-unique name in select branch make the syntax parsing in a union based implementation very awkward, see https://github.com/wangshan/draft-wang-ppm-dap-taskprov/pull/17.\r\n* mention DP on DAP draft https://github.com/wangshan/draft-wang-ppm-differential-privacy",
      "createdAt": "2023-09-29T22:18:25Z",
      "updatedAt": "2023-10-10T18:30:06Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "79469b20654785cdcb66cd2e76fdc07b1d7b4953",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "wangshan/dap-07",
      "headRefOid": "ef4aa7366dd4c52311c2859f072b6e3e49380155",
      "closedAt": "2023-10-10T18:30:06Z",
      "mergedAt": "2023-10-10T18:30:06Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "0ce7101d7543a11b5f6a0a660e1e7481f4aa55c5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585izGJ2",
          "commit": {
            "abbreviatedOid": "ef4aa73"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-04T13:38:04Z",
          "updatedAt": "2023-10-04T13:38:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR585jdBtO",
          "commit": {
            "abbreviatedOid": "ef4aa73"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-10T18:24:57Z",
          "updatedAt": "2023-10-10T18:24:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 42,
      "id": "PR_kwDOH4FR585cjrWB",
      "title": "Remove retry-after from leader",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/42",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address [issue 35](https://github.com/wangshan/draft-wang-ppm-dap-taskprov/issues/35) by removing retry-after.",
      "createdAt": "2023-10-11T19:19:07Z",
      "updatedAt": "2023-10-13T23:11:55Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "0ce7101d7543a11b5f6a0a660e1e7481f4aa55c5",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "remove-retry-after",
      "headRefOid": "f9e1a1ffd3b24cb3e46ee4a9bfeac856497407f5",
      "closedAt": "2023-10-13T23:11:54Z",
      "mergedAt": "2023-10-13T23:11:54Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "2b25f8532adef01cea33413fc571b64e77e0fd80"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585j-P2p",
          "commit": {
            "abbreviatedOid": "f9e1a1f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-13T19:54:24Z",
          "updatedAt": "2023-10-13T19:54:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 43,
      "id": "PR_kwDOH4FR585ckbiM",
      "title": "Add 0len ext to report",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/43",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address issue https://github.com/wangshan/draft-wang-ppm-dap-taskprov/issues/39.",
      "createdAt": "2023-10-11T21:29:39Z",
      "updatedAt": "2023-10-16T15:22:49Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "0ce7101d7543a11b5f6a0a660e1e7481f4aa55c5",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "add-0len-ext-to-report",
      "headRefOid": "ce523f19e367e88dcf18bad81cff714d0c628851",
      "closedAt": "2023-10-16T15:22:49Z",
      "mergedAt": "2023-10-16T15:22:49Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "82460a99ca90b005a9187cb16d89d23ed66bc034"
      },
      "comments": [
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "Also changed unrecognizedMessage to invalidMessage to match core protocol",
          "createdAt": "2023-10-11T21:30:28Z",
          "updatedAt": "2023-10-11T21:30:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585j-NET",
          "commit": {
            "abbreviatedOid": "3a3d197"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-13T19:43:59Z",
          "updatedAt": "2023-10-13T19:53:57Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "Move this new text to the \"Client Behavior\" section.",
              "createdAt": "2023-10-13T19:43:59Z",
              "updatedAt": "2023-10-13T19:53:57Z"
            },
            {
              "originalPosition": 4,
              "body": "To align a bit better with the header.\r\n```suggestion\r\nIn addition, a new `taskprov` extension is offered in both Leader and Helper's\r\n```",
              "createdAt": "2023-10-13T19:47:20Z",
              "updatedAt": "2023-10-13T19:53:57Z"
            },
            {
              "originalPosition": 72,
              "body": "This should be a separate paragraph.",
              "createdAt": "2023-10-13T19:48:41Z",
              "updatedAt": "2023-10-13T19:53:57Z"
            },
            {
              "originalPosition": 74,
              "body": "What's the intent here? To ensure that all Clients indicate support for `task_prov`? I think this should be a MUST.",
              "createdAt": "2023-10-13T19:52:08Z",
              "updatedAt": "2023-10-13T19:53:58Z"
            },
            {
              "originalPosition": 83,
              "body": "```suggestion\r\nencryption. Furthermore, the presence of `task_prov` extension type in the report\r\n```",
              "createdAt": "2023-10-13T19:52:28Z",
              "updatedAt": "2023-10-13T19:53:58Z"
            },
            {
              "originalPosition": 86,
              "body": "```suggestion\r\nmalicious Author from provisioning a modified task to each party by some other other means,\r\n```",
              "createdAt": "2023-10-13T19:53:19Z",
              "updatedAt": "2023-10-13T19:53:58Z"
            },
            {
              "originalPosition": 87,
              "body": "* \"aggregation results\" is not a term we're using. Perhaps you mean \"aggregate result\"?\r\n* Is privacy the only risk?",
              "createdAt": "2023-10-13T19:53:55Z",
              "updatedAt": "2023-10-13T19:53:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585j_TKb",
          "commit": {
            "abbreviatedOid": "3a3d197"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-13T23:51:52Z",
          "updatedAt": "2023-10-13T23:51:53Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "The intent is to keep consistency, if the client opt in to taskprov, it should set both the ext type and dap-taskprov header. agree with the must",
              "createdAt": "2023-10-13T23:51:52Z",
              "updatedAt": "2023-10-13T23:51:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585j_Y31",
          "commit": {
            "abbreviatedOid": "3a3d197"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-13T23:58:33Z",
          "updatedAt": "2023-10-13T23:58:33Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "I can't think of what else a malicious author can achieve with this particular risk ",
              "createdAt": "2023-10-13T23:58:33Z",
              "updatedAt": "2023-10-13T23:58:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585j_baB",
          "commit": {
            "abbreviatedOid": "4eb32f1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "One minor nit!",
          "createdAt": "2023-10-14T00:14:35Z",
          "updatedAt": "2023-10-14T00:15:02Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "```suggestion\r\nDuring Helper aggregate initialization, if any Helper's report share does not\r\ninclude the `taskprov` extension with an empty payload, then the Helper MUST\r\nabort the aggregate request with \"invalidMessage\".\r\n```",
              "createdAt": "2023-10-14T00:14:36Z",
              "updatedAt": "2023-10-14T00:15:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 44,
      "id": "PR_kwDOH4FR585cxTFp",
      "title": "Align aggregator endpoints with DAP-07",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/44",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #6.\r\n\r\nNote that this is a wire-breaking change.",
      "createdAt": "2023-10-13T19:59:12Z",
      "updatedAt": "2024-10-03T22:31:00Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "0ce7101d7543a11b5f6a0a660e1e7481f4aa55c5",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/6",
      "headRefOid": "788dfe95b41450c61147077e745f50bb4e9c1f67",
      "closedAt": "2023-10-16T15:23:34Z",
      "mergedAt": "2023-10-16T15:23:34Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "91b26e724a685d0e253a80d1b2080f0ef0c52e4b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585j_Pjl",
          "commit": {
            "abbreviatedOid": "8d68122"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-13T23:12:44Z",
          "updatedAt": "2023-10-13T23:12:44Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n    Url leader_aggregator_endpoint;\r\n```",
              "createdAt": "2023-10-13T23:12:44Z",
              "updatedAt": "2023-10-13T23:12:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585j_Pko",
          "commit": {
            "abbreviatedOid": "8d68122"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-13T23:12:55Z",
          "updatedAt": "2023-10-13T23:12:55Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n    Url helper_aggregator_endpoint;\r\n```",
              "createdAt": "2023-10-13T23:12:55Z",
              "updatedAt": "2023-10-13T23:12:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585kJz7T",
          "commit": {
            "abbreviatedOid": "788dfe9"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-16T15:19:40Z",
          "updatedAt": "2023-10-16T15:19:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOH4FR585dMWWw",
      "title": "Opt-out if a task parameter is not recognized",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/45",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #23.\r\n\r\nPreviously we would fail to parse the `TaskConfig` if one of its parameters was not recognized. Modify the wire format so that it is always decodable.",
      "createdAt": "2023-10-18T21:36:55Z",
      "updatedAt": "2023-10-18T22:45:10Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "91b26e724a685d0e253a80d1b2080f0ef0c52e4b",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/do/23",
      "headRefOid": "1151f18b9b7bb951119e546e000b65d4d65349da",
      "closedAt": "2023-10-18T22:45:10Z",
      "mergedAt": "2023-10-18T22:45:10Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "999445e7ff6a64115f5657e9cdc29638704a88c9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585kg0qu",
          "commit": {
            "abbreviatedOid": "1151f18"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-10-18T22:43:15Z",
          "updatedAt": "2023-10-18T22:43:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOH4FR585dMgqW",
      "title": "Clean up",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/46",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Stacked on #45.",
      "createdAt": "2023-10-18T22:03:06Z",
      "updatedAt": "2024-10-03T22:30:59Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "cjpatton/do/23",
      "baseRefOid": "1151f18b9b7bb951119e546e000b65d4d65349da",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/last-pass",
      "headRefOid": "1935c5fe7370338e8450552c8d1b79bbd5c21cbe",
      "closedAt": "2023-10-18T22:45:20Z",
      "mergedAt": "2023-10-18T22:45:20Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "a45d1b35776e6a59d688572f80f175c4c5940ccb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585kg0_0",
          "commit": {
            "abbreviatedOid": "1935c5f"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-10-18T22:44:54Z",
          "updatedAt": "2023-10-18T22:44:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOH4FR585frvGq",
      "title": "QueryConfig: Move query type to just before the params",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/49",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is intended to simplify encoding/decoding of this struct.",
      "createdAt": "2023-11-16T21:46:27Z",
      "updatedAt": "2024-10-03T22:30:53Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "e2f78248b527ea6fead1ac49ccf7ca481a685531",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/simpler-encoding",
      "headRefOid": "8cddecc582f988bc27b14fba556e76f81208315c",
      "closedAt": "2023-11-23T02:18:55Z",
      "mergedAt": "2023-11-23T02:18:55Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "2aada1ef363019d79413981c1d7ed58dbfeb30cc"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased.",
          "createdAt": "2023-11-22T18:08:35Z",
          "updatedAt": "2023-11-22T18:08:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585ndZFX",
          "commit": {
            "abbreviatedOid": "c5db2dc"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-16T23:59:27Z",
          "updatedAt": "2023-11-16T23:59:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 50,
      "id": "PR_kwDOH4FR585gEhnj",
      "title": "Remove spurious \"_t\" suffix from int types",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/50",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-21T21:55:30Z",
      "updatedAt": "2024-10-03T22:30:57Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "8f0ec03dcc1812ae2953e5e540d57d872a7a0f63",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/typo-c-style-ints",
      "headRefOid": "cb326023350cbb19d2f851259965b4201b5cb06d",
      "closedAt": "2023-11-22T15:18:56Z",
      "mergedAt": "2023-11-22T15:18:56Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "e2f78248b527ea6fead1ac49ccf7ca481a685531"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585n_WLG",
          "commit": {
            "abbreviatedOid": "cb32602"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-22T15:15:06Z",
          "updatedAt": "2023-11-22T15:15:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 51,
      "id": "PR_kwDOH4FR585gJPl6",
      "title": "Helper: Reject reports with missing extension",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/51",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the Helper is supposed to abort an aggregation job that contains a report share that is missing the `taskprov` extension. However because the Helper report shares are encrypted, the Leader has no way of knowing whether the extension is present or not. This means there is no protocol-level mechanism for the Helper to convey which report needs to be removed from the candidate set before retrying.\r\n\r\nInstead of aborting, have the Helper simply reject the malformed report.\r\n\r\nClarify a few things while at it.",
      "createdAt": "2023-11-22T15:30:20Z",
      "updatedAt": "2024-10-03T22:30:55Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "e2f78248b527ea6fead1ac49ccf7ca481a685531",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/extension-handling",
      "headRefOid": "14868e76af7a7b5568f8d64c275b305f27448335",
      "closedAt": "2023-11-22T18:09:02Z",
      "mergedAt": "2023-11-22T18:09:02Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "9cf9177c27e5eb335fffa48328b6e4a1fb995eca"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585n_vmT",
          "commit": {
            "abbreviatedOid": "a62d8d8"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-22T15:50:28Z",
          "updatedAt": "2023-11-22T15:50:29Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "the rest of the document uses `invalidMessage`,  so does core dap draft.",
              "createdAt": "2023-11-22T15:50:29Z",
              "updatedAt": "2023-11-22T15:50:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585n_w3Z",
          "commit": {
            "abbreviatedOid": "a62d8d8"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-22T15:51:16Z",
          "updatedAt": "2023-11-22T15:51:16Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\npayload, the Helper MUST mark the report as invalid with error\r\n```",
              "createdAt": "2023-11-22T15:51:16Z",
              "updatedAt": "2023-11-22T15:51:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585n_yt5",
          "commit": {
            "abbreviatedOid": "a62d8d8"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-22T15:52:39Z",
          "updatedAt": "2023-11-22T15:52:39Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "\"invalid_message\" is a variant of PrepareError, not an abort.",
              "createdAt": "2023-11-22T15:52:39Z",
              "updatedAt": "2023-11-22T15:52:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585oApp-",
          "commit": {
            "abbreviatedOid": "14868e7"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-22T17:33:35Z",
          "updatedAt": "2023-11-22T17:33:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOH4FR585gL-pt",
      "title": "Add semi-colon after all select blocks",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/52",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-23T02:57:14Z",
      "updatedAt": "2024-10-03T22:30:52Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "2aada1ef363019d79413981c1d7ed58dbfeb30cc",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/nits",
      "headRefOid": "b19cca5e5340d8b89995094a7bd195bcb5e9d0c2",
      "closedAt": "2023-11-27T22:47:31Z",
      "mergedAt": "2023-11-27T22:47:30Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "c816271cbbdb7bb3c27c09d522859ad586eff5d6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585oXIi3",
          "commit": {
            "abbreviatedOid": "b19cca5"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-27T16:41:49Z",
          "updatedAt": "2023-11-27T16:41:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 53,
      "id": "PR_kwDOH4FR585gdh8x",
      "title": "Make max batch size optional",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/53",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Related to PR https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/pull/530 in core DAP",
      "createdAt": "2023-11-27T16:53:17Z",
      "updatedAt": "2023-11-30T23:00:52Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "2aada1ef363019d79413981c1d7ed58dbfeb30cc",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "optional-max-batch-size",
      "headRefOid": "50736d5c04c46842d99326187ca3f07a69627b59",
      "closedAt": "2023-11-30T23:00:52Z",
      "mergedAt": "2023-11-30T23:00:52Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "87e28b9a44e281f4dc082867fcdac9e5622d8f1b"
      },
      "comments": [
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "Made the text more clear, @cjpatton pls have another pass, the DAP PR is merged, we can merge this once it's approved ",
          "createdAt": "2023-11-29T13:43:21Z",
          "updatedAt": "2023-11-29T13:43:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585oZq4S",
          "commit": {
            "abbreviatedOid": "4e984f6"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Setting `max_batch_size` to `0` seems reasonable. Let's hold off on merging until the PR against the core DAP spec gets merged.",
          "createdAt": "2023-11-27T22:49:41Z",
          "updatedAt": "2023-11-27T22:50:46Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Grammar: \"In particular\" is used to refine a previous statement, whereas here it's beginning a statement. I think what you want to do instead is start the paragraph off with \"The max batch size for the `fixed_size` query is optional.\"",
              "createdAt": "2023-11-27T22:49:41Z",
              "updatedAt": "2023-11-27T22:50:46Z"
            },
            {
              "originalPosition": 6,
              "body": "What does this sentence mean?",
              "createdAt": "2023-11-27T22:50:16Z",
              "updatedAt": "2023-11-27T22:50:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585oziCq",
          "commit": {
            "abbreviatedOid": "50736d5"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-30T19:58:18Z",
          "updatedAt": "2023-11-30T19:58:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOH4FR585hIGwn",
      "title": "Remove `default` variant of `select` blocks",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/55",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This does not appear in the grammar of TLS-syntax. Handling of unrecognized variants is unspecified. Either:\r\n\r\n1. The message will be handled as an invalid message, leading to abort; or\r\n\r\n2. The message will be parsed, but the then the receiver will opt-out.\r\n\r\nThis second option is possible because in each case (`QueryConfig`, `VdafConfig`, and `DpConfig`) the length prefix allows the entire message to be parsed.",
      "createdAt": "2023-12-05T04:07:49Z",
      "updatedAt": "2024-10-03T22:30:50Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "87e28b9a44e281f4dc082867fcdac9e5622d8f1b",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/remove-select-default",
      "headRefOid": "9e269653c35d5a54c4bfff5ab603e7a34fd16958",
      "closedAt": "2023-12-06T23:54:46Z",
      "mergedAt": "2023-12-06T23:54:46Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "a6f2ac65cf441a876e4472d68dde1b04c33c13db"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585pVz7K",
          "commit": {
            "abbreviatedOid": "9e26965"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-06T11:30:45Z",
          "updatedAt": "2023-12-06T11:30:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOH4FR585iUgYN",
      "title": "Update DAP and VDAF reference",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/57",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #56 ",
      "createdAt": "2023-12-19T00:31:37Z",
      "updatedAt": "2024-10-03T22:30:49Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "f8cedf129c0dfb6a3461b33f90717fcf88cc534b",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/56",
      "headRefOid": "654f7a5e6b35bf43393828d5cc5b04f64dedf896",
      "closedAt": "2024-01-16T16:44:19Z",
      "mergedAt": "2024-01-16T16:44:19Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "e5634d2f1a47226cd7b9682222eab3768ab02258"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585rdWrH",
          "commit": {
            "abbreviatedOid": "cdb6f1f"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-03T18:17:03Z",
          "updatedAt": "2024-01-03T18:17:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 58,
      "id": "PR_kwDOH4FR585j-iPc",
      "title": "Change dp_config to opaque",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/58",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also remove length hints in TLS variants that are mandatory to configure a task.",
      "createdAt": "2024-01-12T22:22:28Z",
      "updatedAt": "2024-01-16T19:27:29Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "a6f2ac65cf441a876e4472d68dde1b04c33c13db",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "junyec/opaque-dp-config",
      "headRefOid": "6108051567781ad978527d904a1cabf7f364ef79",
      "closedAt": "2024-01-15T13:45:20Z",
      "mergedAt": "2024-01-15T13:45:20Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "f8cedf129c0dfb6a3461b33f90717fcf88cc534b"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm mainly trying to align with our implementations, but I'd welcome feedback on the texts here.",
          "createdAt": "2024-01-12T22:23:21Z",
          "updatedAt": "2024-01-12T22:23:21Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is a regression. The goal of encoding the length of query type, vdaf type, and dp type is so that we can decode a variant we don't recognize. The goal was to separate parsing from protocol logic that is implementation specific.\r\n\r\nI think this is a regression.\r\n\r\nThanks @junyechen1996 for pointing this out.",
          "createdAt": "2024-01-16T16:08:28Z",
          "updatedAt": "2024-01-16T16:08:28Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@wangshan you might remember we discussed this a few months ago.",
          "createdAt": "2024-01-16T16:09:22Z",
          "updatedAt": "2024-01-16T16:09:22Z"
        },
        {
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "body": "@cjpatton this isn't a regression, what we had before was a DpConfig with no length so decoder may not know how to skip it. What we write here uses `opaque dp_config<1..2^16-1>` which encodes the length in the variant length array already. When decoding, you either know how to decode dp_config or know how long it is by reading the first 2 bytes.",
          "createdAt": "2024-01-16T17:44:34Z",
          "updatedAt": "2024-01-16T17:44:34Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> @cjpatton this isn't a regression, what we had before was a DpConfig with no length so decoder may not know how to skip it. What we write here uses `opaque dp_config<1..2^16-1>` which encodes the length in the variant length array already. When decoding, you either know how to decode dp_config or know how long it is by reading the first 2 bytes.\r\n\r\nThe regression is: There is no length prefix for VdafConfig or QueryConfig. DpConfig is fine.",
          "createdAt": "2024-01-16T19:27:28Z",
          "updatedAt": "2024-01-16T19:27:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585slSoZ",
          "commit": {
            "abbreviatedOid": "6108051"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-15T13:44:01Z",
          "updatedAt": "2024-01-15T13:44:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 59,
      "id": "PR_kwDOH4FR585j-jR9",
      "title": "Align parameter orders of standard VDAFs",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/59",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-12T22:28:15Z",
      "updatedAt": "2024-01-17T09:27:48Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "a6f2ac65cf441a876e4472d68dde1b04c33c13db",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "junyec/vdaf-param-order",
      "headRefOid": "42af65c5c66edc56bd85bd871114b58fb24929a9",
      "closedAt": "2024-01-17T09:27:45Z",
      "mergedAt": "2024-01-17T09:27:45Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "2d800b2adff9154a587885050773057a9045b563"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "Since this is wire breaking, let me know if this is not worth the effort, and I can decline this PR.",
          "createdAt": "2024-01-12T22:29:07Z",
          "updatedAt": "2024-01-12T22:29:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585slV4L",
          "commit": {
            "abbreviatedOid": "42af65c"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-15T13:51:53Z",
          "updatedAt": "2024-01-15T13:51:53Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I remember @cjpatton was particular about \"number of summands\", which sounds more appropriate?",
              "createdAt": "2024-01-15T13:51:53Z",
              "updatedAt": "2024-01-15T13:51:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585slZyx",
          "commit": {
            "abbreviatedOid": "42af65c"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-15T14:00:31Z",
          "updatedAt": "2024-01-15T14:00:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR585st3Ze",
          "commit": {
            "abbreviatedOid": "42af65c"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-16T16:09:54Z",
          "updatedAt": "2024-01-16T16:09:58Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Whatever is clearer!",
              "createdAt": "2024-01-16T16:09:54Z",
              "updatedAt": "2024-01-16T16:09:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585s0Ukf",
          "commit": {
            "abbreviatedOid": "42af65c"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-16T23:16:44Z",
          "updatedAt": "2024-01-16T23:16:45Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "@junyechen1996 your call, as long as /* length of the vector */ has no ambiguity, let's use it and merge this PR",
              "createdAt": "2024-01-16T23:16:44Z",
              "updatedAt": "2024-01-16T23:16:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 60,
      "id": "PR_kwDOH4FR585kWRhY",
      "title": "Add back `DpConfig` and the length prefixes in `VdafConfig` and `QueryConfig`",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/60",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "**Option 1.**\r\n\r\nA previous commit f8cedf129c0dfb6a3461b33f90717fcf88cc534b, the `DpConfig` structure was replaced with an opaque byte string that the parties are meant to ignore. We don't want the parties to ignore unrecognized parameters: they should opt out instead. This change specifies that the content should be a `DpConfig`. We also remove the length prefix from that structure, since it's no longer needed.\r\n\r\nThe same commit removed the length prefixes from `VdafConfig` and `QueryConfig`. This is a regression because it means the encoding of the `TaskConfig` is no longer self-describing. In particular, it forces to conflate opt-out due to unrecognized variants (an unimplemented VDAF, say) with serialization errors. Solve this by adding back the length prefixes.",
      "createdAt": "2024-01-17T19:34:46Z",
      "updatedAt": "2024-10-03T22:30:47Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "2d800b2adff9154a587885050773057a9045b563",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/self-describing-1",
      "headRefOid": "e88fdd68622c9616fe533907e061416a6cc0b6ba",
      "closedAt": "2024-01-17T20:16:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed in favor of #61.",
          "createdAt": "2024-01-17T20:16:56Z",
          "updatedAt": "2024-01-17T20:16:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585s9bhQ",
          "commit": {
            "abbreviatedOid": "e88fdd6"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-17T19:36:13Z",
          "updatedAt": "2024-01-17T19:36:14Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Reviewer note: it would be slightly more consistent to replace this with `DpConfig` and add the internal length prefix back (it was there before https://github.com/wangshan/draft-wang-ppm-dap-taskprov/commit/f8cedf129c0dfb6a3461b33f90717fcf88cc534b), but I wanted to the minimal change here.",
              "createdAt": "2024-01-17T19:36:14Z",
              "updatedAt": "2024-01-17T19:36:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOH4FR585kWSDm",
      "title": "Add back `DpConfig` and make `vdaf_config` and `query_config` opaque",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/61",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "**Option 2.**\r\n\r\nA previous commit f8cedf129c0dfb6a3461b33f90717fcf88cc534b, the `DpConfig` structure was replaced with an opaque byte string that the parties are meant to ignore. We don't want the parties to ignore unrecognized parameters: they should opt out instead. This change specifies that the content should be a `DpConfig`. We also remove the length prefix from that structure, since it's no longer needed.\r\n\r\nThe same commit removed the length prefixes from `VdafConfig` and `QueryConfig`. This is a regression because it means the encoding of the `TaskConfig` is no longer self-describing. In particular, it forces to conflate opt-out due to unrecognized variants (an unimplemented VDAF, say) with serialization errors. Solve this making the `vdaf_config` and `query_config` fields of the `TaskConfig` struct opaque, in the same way that `dp_config` is opaque.",
      "createdAt": "2024-01-17T19:36:38Z",
      "updatedAt": "2024-10-03T22:30:46Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "2d800b2adff9154a587885050773057a9045b563",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpastton/self-describing-2",
      "headRefOid": "aa1815c17bb63386fc511dd631e85b630e8034b1",
      "closedAt": "2024-01-18T00:47:48Z",
      "mergedAt": "2024-01-18T00:47:48Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "1ddcb35830923d2a770bb737b95e19033fa44a83"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Squashed.",
          "createdAt": "2024-01-17T21:58:29Z",
          "updatedAt": "2024-01-17T21:58:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585s9fsR",
          "commit": {
            "abbreviatedOid": "4292eae"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-17T19:46:35Z",
          "updatedAt": "2024-01-17T19:46:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR585s9hXQ",
          "commit": {
            "abbreviatedOid": "4292eae"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-17T19:50:39Z",
          "updatedAt": "2024-01-17T19:53:09Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nThe length prefix of the `query_config` ensures that the `QueryConfig` structure\r\n```\r\n\r\nsame as below.",
              "createdAt": "2024-01-17T19:50:39Z",
              "updatedAt": "2024-01-17T19:53:09Z"
            },
            {
              "originalPosition": 86,
              "body": "So now we will have an opaque `vdaf_config`, and another opaque `dp_config` in the decoded `vdaf_config`. I'm not objected to it, but I just want to make sure this is intentional.",
              "createdAt": "2024-01-17T19:52:56Z",
              "updatedAt": "2024-01-17T19:53:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585s9pew",
          "commit": {
            "abbreviatedOid": "4292eae"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-17T20:11:38Z",
          "updatedAt": "2024-01-17T20:11:38Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "That's right.\r\n\r\nIt's a little awkward I think. It might make sense to move `dp_config` out of `VdafConfig` into `TaskConfig`. However we discussed this before and I think @wangshan wants the DP config to stay where it is.",
              "createdAt": "2024-01-17T20:11:38Z",
              "updatedAt": "2024-01-17T20:11:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585s9qFS",
          "commit": {
            "abbreviatedOid": "d7e5a0d"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-17T20:13:19Z",
          "updatedAt": "2024-01-17T20:13:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR585s98DV",
          "commit": {
            "abbreviatedOid": "d7e5a0d"
          },
          "author": "kristineguo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-17T20:57:58Z",
          "updatedAt": "2024-01-17T20:57:59Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Should minimum length be `1` to enforce it is present? DpConfig is currently expressed as `opaque dp_config<1..2^16-1>;`.",
              "createdAt": "2024-01-17T20:57:58Z",
              "updatedAt": "2024-01-17T20:58:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585s98RF",
          "commit": {
            "abbreviatedOid": "d7e5a0d"
          },
          "author": "kristineguo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-17T20:58:37Z",
          "updatedAt": "2024-01-17T20:58:37Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Same comment here.",
              "createdAt": "2024-01-17T20:58:37Z",
              "updatedAt": "2024-01-17T20:58:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585s98aS",
          "commit": {
            "abbreviatedOid": "d7e5a0d"
          },
          "author": "kristineguo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-17T20:59:03Z",
          "updatedAt": "2024-01-17T20:59:03Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "nit- is as",
              "createdAt": "2024-01-17T20:59:03Z",
              "updatedAt": "2024-01-17T20:59:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585s98n5",
          "commit": {
            "abbreviatedOid": "d7e5a0d"
          },
          "author": "kristineguo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-17T20:59:38Z",
          "updatedAt": "2024-01-17T20:59:38Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "nit- typo `opaque`",
              "createdAt": "2024-01-17T20:59:38Z",
              "updatedAt": "2024-01-17T20:59:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585s-BKR",
          "commit": {
            "abbreviatedOid": "d7e5a0d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-17T21:10:45Z",
          "updatedAt": "2024-01-17T21:10:45Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Done.\r\n\r\nNote that eventually we'll set these to be the actual minimum length, which is 15 in this case (the smallest possible QueryConfig).",
              "createdAt": "2024-01-17T21:10:45Z",
              "updatedAt": "2024-01-17T21:10:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585s-Jlg",
          "commit": {
            "abbreviatedOid": "aa1815c"
          },
          "author": "kristineguo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-17T21:35:47Z",
          "updatedAt": "2024-01-17T21:58:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOH4FR585yS1Fk",
      "title": "Split the draft into task binding and task provisioning",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/65",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #54.\r\n\r\nThis commit splits the draft into the task binding extension and a separate section for the optional provisioning mechanism. While at it:\r\n\r\n- Fix some editorial issues.\r\n- Rename the extension to \"Taskbind\".\r\n- Recommend having the author digitally sign the advertised task config. This helps mitigate the risk of malicious Clients DoS'ing an Aggregator.",
      "createdAt": "2024-06-12T23:20:28Z",
      "updatedAt": "2024-10-03T22:30:45Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "1ddcb35830923d2a770bb737b95e19033fa44a83",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/54/1",
      "headRefOid": "9a2ec7aaa0596ad1f5ed833ea82737f4940c3595",
      "closedAt": "2024-06-26T14:32:26Z",
      "mergedAt": "2024-06-26T14:32:26Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "8f8069550e12f71646b83e558c9f4f74919e9ea9"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased and squashed.",
          "createdAt": "2024-06-26T14:31:16Z",
          "updatedAt": "2024-06-26T14:31:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR585_KYbX",
          "commit": {
            "abbreviatedOid": "ea29b5a"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks good, only a few minor comments!",
          "createdAt": "2024-06-21T21:12:48Z",
          "updatedAt": "2024-06-21T21:24:57Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "```suggestion\r\nID of the request.\r\n```",
              "createdAt": "2024-06-21T21:12:48Z",
              "updatedAt": "2024-06-21T21:24:57Z"
            },
            {
              "originalPosition": 246,
              "body": "extra space",
              "createdAt": "2024-06-21T21:14:39Z",
              "updatedAt": "2024-06-21T21:24:57Z"
            },
            {
              "originalPosition": 303,
              "body": "This should be Taskprov participant?",
              "createdAt": "2024-06-21T21:20:03Z",
              "updatedAt": "2024-06-21T21:24:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585_gYXA",
          "commit": {
            "abbreviatedOid": "8a13fea"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-25T16:22:34Z",
          "updatedAt": "2024-06-25T16:22:44Z",
          "comments": [
            {
              "originalPosition": 303,
              "body": "Good catch. This appears to be leftovers from `%s/Taskprov/Taskbind/`. I meant \"protocol\" here.",
              "createdAt": "2024-06-25T16:22:34Z",
              "updatedAt": "2024-06-25T16:22:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR585_ocC4",
          "commit": {
            "abbreviatedOid": "9a2ec7a"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-26T09:52:33Z",
          "updatedAt": "2024-06-26T14:30:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 66,
      "id": "PR_kwDOH4FR585z6wLS",
      "title": "Issue 48: Acknowledge security consideration of having task Author",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/66",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #48.",
      "createdAt": "2024-06-28T17:56:48Z",
      "updatedAt": "2024-07-08T16:17:35Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "06f1efcc8989818a54daabefe8806e629827e768",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "junyec/issue48",
      "headRefOid": "e7fb2c548f8db35328149594ccbcd2e8b1570ba1",
      "closedAt": "2024-07-08T16:17:35Z",
      "mergedAt": "2024-07-08T16:17:35Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "7225727fba628dd521ae91a92ed6a7f5c553bc7e"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "Squashed.",
          "createdAt": "2024-07-05T17:33:02Z",
          "updatedAt": "2024-07-05T17:33:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586AEi-U",
          "commit": {
            "abbreviatedOid": "890fc86"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T18:11:42Z",
          "updatedAt": "2024-06-28T18:11:43Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "We can point to some mitigation, e.g., OHTTP, not sure if it's worth mentioning here.",
              "createdAt": "2024-06-28T18:11:42Z",
              "updatedAt": "2024-06-28T18:11:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AEkzf",
          "commit": {
            "abbreviatedOid": "890fc86"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T18:15:51Z",
          "updatedAt": "2024-06-28T18:16:23Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "Let's make this a new paragraph.",
              "createdAt": "2024-06-28T18:15:52Z",
              "updatedAt": "2024-06-28T18:16:23Z"
            },
            {
              "originalPosition": 8,
              "body": "How does OHTTP mitigate this risk?",
              "createdAt": "2024-06-28T18:16:20Z",
              "updatedAt": "2024-06-28T18:16:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AElsI",
          "commit": {
            "abbreviatedOid": "890fc86"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T18:18:04Z",
          "updatedAt": "2024-06-28T18:18:04Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "OHTTP only hides the \"location\" part. I assume there will be a lot more information leaked by multiple uploads, so maybe not worth mentioning.",
              "createdAt": "2024-06-28T18:18:04Z",
              "updatedAt": "2024-06-28T18:18:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AE0uL",
          "commit": {
            "abbreviatedOid": "890fc86"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T18:55:58Z",
          "updatedAt": "2024-06-28T18:55:58Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Actually, by checking the task parameters, it will be mitigated slightly, e.g., by making sure min batch size is not too small, but the Author can still target the same group of clients for this attack.",
              "createdAt": "2024-06-28T18:55:58Z",
              "updatedAt": "2024-06-28T18:55:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AFNz0",
          "commit": {
            "abbreviatedOid": "dcf1a7d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T19:49:46Z",
          "updatedAt": "2024-06-28T19:59:55Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nAnother risk introduced by the addition of the Author is the Author could configure\r\n```",
              "createdAt": "2024-06-28T19:49:46Z",
              "updatedAt": "2024-06-28T19:59:55Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\ntrack the uploading activities of that Client, which could leak information about\r\nthat Client, e.g., location.\r\n```",
              "createdAt": "2024-06-28T19:50:21Z",
              "updatedAt": "2024-06-28T19:59:55Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\ntrack the uploading activities of that Client, which leaks information about\r\nthat Client, e.g., its location.\r\n```",
              "createdAt": "2024-06-28T19:50:33Z",
              "updatedAt": "2024-06-28T19:59:55Z"
            },
            {
              "originalPosition": 3,
              "body": "It's not clear to me why tracking a client across uploads leaks the client's location. Do you have an idea in mind? \r\n\r\nI realize this is mentioned in #48, but now I'm not sure it's the best example. Stepping back, what does an attacker that controls the Author (and possible the Collector and an Aggregator) by learn by fingerprinting a Client's upload task? Perhaps this would violate other properties adjcent to DAP, like anonymity or differential privacy?",
              "createdAt": "2024-06-28T19:59:51Z",
              "updatedAt": "2024-06-28T19:59:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AFR1w",
          "commit": {
            "abbreviatedOid": "890fc86"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T20:00:34Z",
          "updatedAt": "2024-06-28T20:00:34Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "(moved to another thread)",
              "createdAt": "2024-06-28T20:00:34Z",
              "updatedAt": "2024-06-28T20:00:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AFYKo",
          "commit": {
            "abbreviatedOid": "dcf1a7d"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T20:14:30Z",
          "updatedAt": "2024-06-28T20:14:30Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "I think if a client sends report to leader directly, then the upload will contain things like IP, or user agent, etc. That can leak the client location, device. And by not checking task parameters carefully, as a task author, I can set min_batch_size to be 1, and see the client measurement directly, along with user agent and IP.",
              "createdAt": "2024-06-28T20:14:30Z",
              "updatedAt": "2024-06-28T20:14:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AFgC7",
          "commit": {
            "abbreviatedOid": "dcf1a7d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T20:32:43Z",
          "updatedAt": "2024-06-28T20:32:44Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "> I think if a client sends report to leader directly, then the upload will contain things like IP, or user agent, etc.\r\n\r\nRight: DAP on its own doesn't provide for anonymity. Suppose though you rand DAP on top of OHTTP.\r\n\r\n> That can leak the client location, device. And by not checking task parameters carefully, as a task author, I can set min_batch_size to be 1, and see the client measurement directly, along with user agent and IP.\r\n\r\nThis is supposed to be prevented by the \"opt-in\" procedure.\r\n\r\n",
              "createdAt": "2024-06-28T20:32:43Z",
              "updatedAt": "2024-06-28T20:32:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AFkco",
          "commit": {
            "abbreviatedOid": "dcf1a7d"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T20:41:45Z",
          "updatedAt": "2024-06-28T20:41:45Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "I guess maybe looking at this issue again, do we just care about the capability of author colluding with leader, where author is not a collector? So it cannot see the measurement in the clear. So you can only get the metadata information of a particular client, e.g. IP and user agent. Is that the only security risk we care about then?",
              "createdAt": "2024-06-28T20:41:45Z",
              "updatedAt": "2024-06-28T20:41:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AFlmz",
          "commit": {
            "abbreviatedOid": "dcf1a7d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T20:45:02Z",
          "updatedAt": "2024-06-28T20:45:03Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "Yeah I think that's a good example of the kind of risk we're thinking of. More to the point: The metadata may convey to the Leader who the client is; and if you're expecting that to be impossible, say because you use OHTTP, then you have to be very careful about how taskprov is deployed.",
              "createdAt": "2024-06-28T20:45:02Z",
              "updatedAt": "2024-06-28T20:45:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AFmLs",
          "commit": {
            "abbreviatedOid": "dcf1a7d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T20:46:26Z",
          "updatedAt": "2024-06-28T20:46:26Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "But I think we could also make the point that, even if the attacker can deanonymize a client, it's hard for it do learn anything more than the client uploaded a report. If the task is unique to that client, and the batch size is larger than 1, then it's really not going to get any more information.",
              "createdAt": "2024-06-28T20:46:26Z",
              "updatedAt": "2024-06-28T20:46:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AGHMj",
          "commit": {
            "abbreviatedOid": "1768b6a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T22:57:40Z",
          "updatedAt": "2024-06-28T23:04:59Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nClient, e.g., the Client IP or user agent string. This can be mitigated by\r\n```",
              "createdAt": "2024-06-28T22:57:40Z",
              "updatedAt": "2024-06-28T23:04:59Z"
            },
            {
              "originalPosition": 16,
              "body": "It's not clear to me that OHTTP mitigates this issue. In fact, I think the converse is true: fingerprinting the client effectively removes any protection that the client gets from OHTTP. Concretely, the Author configures the client with `TaskConfig<task_info = \"this client has IP address 192.168.0.1\">`; when the Leader gets the Client's report (via the OHTTP proxy), the Leader immediately knows the IP address of the client that produced the report.",
              "createdAt": "2024-06-28T23:02:26Z",
              "updatedAt": "2024-06-28T23:04:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AGMYo",
          "commit": {
            "abbreviatedOid": "1768b6a"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T23:34:18Z",
          "updatedAt": "2024-06-28T23:34:18Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "You mean only targeting that client in a particular IP address? Let's avoid talking about OHTTP mitigation in this scenario then. Instead we will just say, if the author can deanonymize the client, the author can learn the metadata information at best, if the client carefully checks for privacy parameter.",
              "createdAt": "2024-06-28T23:34:18Z",
              "updatedAt": "2024-06-28T23:34:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AZNme",
          "commit": {
            "abbreviatedOid": "cb535a7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This is looking good. One question we need to answer: under what circumstances is this attack a problem? Anonymity of the clients is not one of DAP's core design goals. On the other hand, when we compose DAP with something like OHTTP, this attack threatens the anonymity properties OHTTP is supposed to provvide.",
          "createdAt": "2024-07-02T14:51:14Z",
          "updatedAt": "2024-07-02T14:53:28Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Is this what you mean?\r\n```suggestion\r\nClient. If the Author colludes with the Leader, the Leader can learn some metadata\r\ninformation about the Client, e.g., the Client IP, user agent string, or the\r\n```",
              "createdAt": "2024-07-02T14:51:14Z",
              "updatedAt": "2024-07-02T14:53:28Z"
            },
            {
              "originalPosition": 14,
              "body": "The leader already learns the upload timestamp. (It's in the report metadata.)\r\n\r\nAlso, let's be more precise about how it learns things it's not supposed to.",
              "createdAt": "2024-07-02T14:51:57Z",
              "updatedAt": "2024-07-02T14:53:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AlbE_",
          "commit": {
            "abbreviatedOid": "cb535a7"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-03T20:04:42Z",
          "updatedAt": "2024-07-03T20:04:42Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "You mean \"the Author\"?",
              "createdAt": "2024-07-03T20:04:42Z",
              "updatedAt": "2024-07-03T20:04:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AmxUw",
          "commit": {
            "abbreviatedOid": "cb535a7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-03T23:27:53Z",
          "updatedAt": "2024-07-03T23:27:53Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Actually I meant the Leader, but Author makes sense too I suppose. Perhaps we should just say \"attacker\" here.",
              "createdAt": "2024-07-03T23:27:53Z",
              "updatedAt": "2024-07-03T23:27:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AmxgA",
          "commit": {
            "abbreviatedOid": "5547446"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for being patient with me!",
          "createdAt": "2024-07-03T23:29:01Z",
          "updatedAt": "2024-07-03T23:30:19Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": ":)\r\n\r\n```suggestion\r\nwith Oblivious HTTP {{!RFC9458}} to forward Client reports\r\n```",
              "createdAt": "2024-07-03T23:29:02Z",
              "updatedAt": "2024-07-03T23:30:19Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nto the Leader. If the Author colludes with the Leader, the attacker can learn some\r\n```",
              "createdAt": "2024-07-03T23:29:54Z",
              "updatedAt": "2024-07-03T23:30:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AyRP3",
          "commit": {
            "abbreviatedOid": "5547446"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-05T12:49:36Z",
          "updatedAt": "2024-07-05T12:49:36Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I copied it from DAP draft, perhaps this needs to be updated in DAP as well.",
              "createdAt": "2024-07-05T12:49:36Z",
              "updatedAt": "2024-07-05T12:49:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOH4FR585z7BXD",
      "title": "Issue 47: client may skip advertising task",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/67",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #47.",
      "createdAt": "2024-06-28T18:51:26Z",
      "updatedAt": "2024-06-28T23:13:28Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "8f8069550e12f71646b83e558c9f4f74919e9ea9",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "junyec/issue47",
      "headRefOid": "2367603caccd4e6f9c803ca1b98ed49c1a8c5447",
      "closedAt": "2024-06-28T23:13:25Z",
      "mergedAt": "2024-06-28T23:13:25Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "06f1efcc8989818a54daabefe8806e629827e768"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "Squashed.",
          "createdAt": "2024-06-28T22:21:04Z",
          "updatedAt": "2024-06-28T22:21:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586AFUdc",
          "commit": {
            "abbreviatedOid": "c93fca8"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T20:07:07Z",
          "updatedAt": "2024-06-28T20:07:11Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Hmmm, this is interesting. Why does client need to send the header at all? What do you expect the leader if it has opted in to the task, but the client doesn't send the header?",
              "createdAt": "2024-06-28T20:07:07Z",
              "updatedAt": "2024-06-28T20:07:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AFZPq",
          "commit": {
            "abbreviatedOid": "c93fca8"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T20:16:25Z",
          "updatedAt": "2024-06-28T20:16:25Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "The goal is to distinguish between taskprov and non-taskprov tasks. If we don't do this, I guess we can decrypt leader share and try to find the extension codepoint. Both should work. Do you prefer the latter?",
              "createdAt": "2024-06-28T20:16:25Z",
              "updatedAt": "2024-06-28T20:16:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AFgu0",
          "commit": {
            "abbreviatedOid": "c93fca8"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T20:34:17Z",
          "updatedAt": "2024-06-28T20:34:17Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "If the leader has opted in, then it knows that the task is taskprov. I don't think signaling in the header as well as necessary. Dropping it here would make the protocol simpler, so I'd be in favor of dropping it.",
              "createdAt": "2024-06-28T20:34:17Z",
              "updatedAt": "2024-06-28T20:34:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AF-1x",
          "commit": {
            "abbreviatedOid": "c93fca8"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T22:01:23Z",
          "updatedAt": "2024-06-28T22:01:24Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Sounds good. Updated the PR.",
              "createdAt": "2024-06-28T22:01:24Z",
              "updatedAt": "2024-06-28T22:01:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AF_Kt",
          "commit": {
            "abbreviatedOid": "597c2ef"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks good, just some minor grammatical stuff",
          "createdAt": "2024-06-28T22:03:09Z",
          "updatedAt": "2024-06-28T22:06:18Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "More perscriptive\r\n```suggestion\r\nThe Client SHOULD advertise the task configuration by specifying the encoded\r\n`TaskConfig` described in {{definition}} in the \"dap-taskprov\" HTTP header, but\r\nMAY choose to omit this header in order to save network bandwidth. However, the\r\n```",
              "createdAt": "2024-06-28T22:03:09Z",
              "updatedAt": "2024-06-28T22:06:18Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nthis task. In this case, the Client MUST retry the upload request with\r\nthe \"dap-taskprov\" HTTP header.\r\n```",
              "createdAt": "2024-06-28T22:04:02Z",
              "updatedAt": "2024-06-28T22:06:18Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\ntask ID is not recognized, then it MUST abort the upload request with\r\n```",
              "createdAt": "2024-06-28T22:04:21Z",
              "updatedAt": "2024-06-28T22:06:18Z"
            },
            {
              "originalPosition": 46,
              "body": "It does not have to \"ask\" explicitly.\r\n```suggestion\r\nMUST abort with \"unrecognizedTask\". The Client will then retry with the task advertisement.\r\n```",
              "createdAt": "2024-06-28T22:05:20Z",
              "updatedAt": "2024-06-28T22:06:18Z"
            },
            {
              "originalPosition": 48,
              "body": "A simpler, and more complete way to say this is\r\n```suggestion\r\nIf the Client advertises the task, the Leader checks that\r\n```",
              "createdAt": "2024-06-28T22:05:47Z",
              "updatedAt": "2024-06-28T22:06:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586AGDeS",
          "commit": {
            "abbreviatedOid": "2367603"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-28T22:29:49Z",
          "updatedAt": "2024-06-28T22:29:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOH4FR5853-cQg",
      "title": "Editorial changes",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/68",
      "state": "MERGED",
      "author": "divergentdave",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This makes a few editorial fixes throughout the document.\r\n\r\n- There's one reference to the payload of the extension left over from past drafts (the payload should now be empty).\r\n- There are contradicting statements that the collector receives task parameters via HTTP headers and directly from the task author. I removed mention of HTTP headers, since the collector only initiates HTTP requests.\r\n- I changed places where mention was made of the collector making an upload request or the helper receiving an upload request.",
      "createdAt": "2024-08-09T18:15:50Z",
      "updatedAt": "2024-08-09T21:08:55Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "7225727fba628dd521ae91a92ed6a7f5c553bc7e",
      "headRepository": "divergentdave/draft-wang-ppm-dap-taskprov",
      "headRefName": "editorial",
      "headRefOid": "2909c5be7604782d3e33dcc555f0a0bc517e0fba",
      "closedAt": "2024-08-09T21:08:55Z",
      "mergedAt": "2024-08-09T21:08:55Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "631f20ba594f496743b99c700f7abd1b010dd1fc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586E946J",
          "commit": {
            "abbreviatedOid": "2909c5b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, David!",
          "createdAt": "2024-08-09T18:23:04Z",
          "updatedAt": "2024-08-09T18:23:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOH4FR5853_YgL",
      "title": "Add @divergentdave to contributors",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/69",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "David has sent a few PRs, some of which have helped clarify things a bunch.\r\n\r\ncc/ @divergentdave: please double check your address in affiliation.",
      "createdAt": "2024-08-09T22:04:15Z",
      "updatedAt": "2024-10-03T22:30:43Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "631f20ba594f496743b99c700f7abd1b010dd1fc",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/ack-david",
      "headRefOid": "7fc4e7e32bfc3681730eb13400c8b85671b12ec3",
      "closedAt": "2024-09-06T19:28:52Z",
      "mergedAt": "2024-09-06T19:28:52Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "739fea8d0a9a1c25659f0767b1e739f2011c7189"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586E-_-3",
          "commit": {
            "abbreviatedOid": "7fc4e7e"
          },
          "author": "divergentdave",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-09T22:07:25Z",
          "updatedAt": "2024-08-09T22:07:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOH4FR5859joLo",
      "title": "Add salt to task ID computation (*)",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/73",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "Closes #64.\r\n\r\nCurrent the task ID is computed by hashing the raw `TaskConfig`. Prepend the `TaskConfig` with a salt string so that it's less likely we'll confuse the task ID with the hash of the task config in a different context.",
      "createdAt": "2024-10-03T22:27:09Z",
      "updatedAt": "2024-10-09T14:39:07Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "cjpatton/artifact-v4",
      "baseRefOid": "ae1bb181741bd1334736d443e9ff0d7fdaf6bd91",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/64",
      "headRefOid": "cc5603113b37f735ba77cf485576c253f0e29bcd",
      "closedAt": "2024-10-09T14:37:42Z",
      "mergedAt": "2024-10-09T14:37:42Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "b9c25a780c335f74cc7a7c1dd5972b7f1e3fe3be"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Whoops, I forgot to change base before merging. I cherry-picked this commit onto main and pushed.",
          "createdAt": "2024-10-09T14:39:05Z",
          "updatedAt": "2024-10-09T14:39:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586MWRtM",
          "commit": {
            "abbreviatedOid": "cc56031"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-08T14:15:43Z",
          "updatedAt": "2024-10-08T14:15:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOH4FR5859jomm",
      "title": "Bump artifcat to v4",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/74",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-03T22:29:17Z",
      "updatedAt": "2024-10-04T19:35:34Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "739fea8d0a9a1c25659f0767b1e739f2011c7189",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/artifact-v4",
      "headRefOid": "ae1bb181741bd1334736d443e9ff0d7fdaf6bd91",
      "closedAt": "2024-10-04T19:35:34Z",
      "mergedAt": "2024-10-04T19:35:34Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "d34ab6f1aa01b66b93f07ff38bc781a478158327"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586MAtAx",
          "commit": {
            "abbreviatedOid": "ae1bb18"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-04T19:30:12Z",
          "updatedAt": "2024-10-04T19:30:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOH4FR5859qRDa",
      "title": "Address issue 70 - update codepoints",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/75",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "Closes #70 .",
      "createdAt": "2024-10-04T19:29:40Z",
      "updatedAt": "2024-10-10T21:52:11Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "c9be0ed4372b41805ebfbbd4086eafb2b2160baf",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "junyec/issue-70",
      "headRefOid": "2fc4a8e5afaf03c043f5d43606dc6a8b3af60721",
      "closedAt": "2024-10-10T21:52:11Z",
      "mergedAt": "2024-10-10T21:52:11Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "bde12c6d217fc3d9107a2b2dda1efbc8bee16e47"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "@cjpatton I will wait for DAP-12 to be cut.",
          "createdAt": "2024-10-08T14:18:22Z",
          "updatedAt": "2024-10-08T14:18:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586MAtMa",
          "commit": {
            "abbreviatedOid": "06be8d1"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T19:30:42Z",
          "updatedAt": "2024-10-04T19:30:51Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Don't think this is standardized yet? @cjpatton ",
              "createdAt": "2024-10-04T19:30:42Z",
              "updatedAt": "2024-10-04T19:30:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586MAylm",
          "commit": {
            "abbreviatedOid": "06be8d1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T19:46:25Z",
          "updatedAt": "2024-10-04T19:46:25Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "You're right, I'm not sure how this got added. It looks like I did somehow 8f806955",
              "createdAt": "2024-10-04T19:46:25Z",
              "updatedAt": "2024-10-04T19:46:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586MAzO8",
          "commit": {
            "abbreviatedOid": "160748f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Rebasing should make CI pass.",
          "createdAt": "2024-10-04T19:48:21Z",
          "updatedAt": "2024-10-08T14:16:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOH4FR5859_eIR",
      "title": "Address issue 62 - adding task start time",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/76",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01",
        "wire breaking",
        "interim-2024-10-24"
      ],
      "body": "Closes #62.",
      "createdAt": "2024-10-08T19:40:49Z",
      "updatedAt": "2024-10-25T14:54:05Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "ca4edce14124bee6b2333908f8eb321cf4251f83",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "junyec/issue-62",
      "headRefOid": "3102c0d1919b65edda40ea8dcc588ac3be012a2f",
      "closedAt": "2024-10-25T14:54:05Z",
      "mergedAt": "2024-10-25T14:54:05Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "bd9e96b739c38ea661d7093d4ed75125b0237985"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased, assuming https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/pull/624 is merged.",
          "createdAt": "2024-10-22T17:41:41Z",
          "updatedAt": "2024-10-22T17:41:41Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "2024/10/24 interim: @junyechen1996 instead of `Time task_start` and `Time task_end`, we will have `Time task_start` and `Duration task_duration`. That way we avoid encoding invalid task validity ranges.",
          "createdAt": "2024-10-24T22:05:05Z",
          "updatedAt": "2024-10-24T22:05:05Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "> 2024/10/24 interim: @junyechen1996 instead of `Time task_start` and `Time task_end`, we will have `Time task_start` and `Duration task_duration`. That way we avoid encoding invalid task validity ranges.\r\n\r\nUpdated the PR to reflect this^.",
          "createdAt": "2024-10-25T05:16:59Z",
          "updatedAt": "2024-10-25T05:16:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586NT6xV",
          "commit": {
            "abbreviatedOid": "77fa9da"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T22:30:22Z",
          "updatedAt": "2024-10-15T22:30:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR586ONwgx",
          "commit": {
            "abbreviatedOid": "7924b51"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-22T18:24:02Z",
          "updatedAt": "2024-10-22T18:24:47Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "nit: Consider harmonizing the comments for task_start and task_expiration.",
              "createdAt": "2024-10-22T18:24:02Z",
              "updatedAt": "2024-10-22T18:24:47Z"
            },
            {
              "originalPosition": 4,
              "body": "Make sure this wraps at 69 columns; otherwise the `make` will emit a warning that the \"art\" is too wide.",
              "createdAt": "2024-10-22T18:24:43Z",
              "updatedAt": "2024-10-22T18:24:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586OQKs9",
          "commit": {
            "abbreviatedOid": "f82e057"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for taking initiative here.",
          "createdAt": "2024-10-22T23:51:32Z",
          "updatedAt": "2024-10-22T23:51:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR586Oxj9k",
          "commit": {
            "abbreviatedOid": "3102c0d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-25T13:49:10Z",
          "updatedAt": "2024-10-25T13:49:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 77,
      "id": "PR_kwDOH4FR585-FEcy",
      "title": "Editorial after adoption",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/77",
      "state": "MERGED",
      "author": "wangshan",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Change `wangshan/draft-wang*` to `ietf-wg-ppm/draft-ietf*`",
      "createdAt": "2024-10-09T13:04:57Z",
      "updatedAt": "2024-10-09T13:36:32Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "d34ab6f1aa01b66b93f07ff38bc781a478158327",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "editorial-after-adoption",
      "headRefOid": "95ef2835e6e0f1d824122ffd63c2f515c3eb8866",
      "closedAt": "2024-10-09T13:36:32Z",
      "mergedAt": "2024-10-09T13:36:32Z",
      "mergedBy": "wangshan",
      "mergeCommit": {
        "oid": "408b457f17d23283ffecdd2b23abce782af0a4f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586Mf6q3",
          "commit": {
            "abbreviatedOid": "95ef283"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-09T13:31:48Z",
          "updatedAt": "2024-10-09T13:31:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOH4FR585-GPtM",
      "title": "Update README to match draft title",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/78",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "",
      "createdAt": "2024-10-09T15:23:33Z",
      "updatedAt": "2024-10-09T16:06:31Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "a0df1780d2ad1d575e20cf0c1072ecf3ec1d01e8",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/readme",
      "headRefOid": "ea12d9ef4dd79de6bc88b58faace5e3159c34444",
      "closedAt": "2024-10-09T16:06:31Z",
      "mergedAt": "2024-10-09T16:06:30Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "434fd5b3b90e0f693deb663eaae9a413863ed7fa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586MhdhO",
          "commit": {
            "abbreviatedOid": "ea12d9e"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-09T15:59:27Z",
          "updatedAt": "2024-10-09T15:59:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 79,
      "id": "PR_kwDOH4FR585-GhR5",
      "title": "House keeping",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/79",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "* Run `make update-files`\r\n* Run `make update`\r\n* Add a doc abbreviation tag\r\n* Resolve all warnings from `xml2rfc`",
      "createdAt": "2024-10-09T15:57:54Z",
      "updatedAt": "2024-10-09T16:06:43Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "a0df1780d2ad1d575e20cf0c1072ecf3ec1d01e8",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/update",
      "headRefOid": "0264981bc4c8947296dbd6c76f7538dd6f46e8ae",
      "closedAt": "2024-10-09T16:06:43Z",
      "mergedAt": "2024-10-09T16:06:43Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "c9be0ed4372b41805ebfbbd4086eafb2b2160baf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586MheBJ",
          "commit": {
            "abbreviatedOid": "0264981"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-09T16:00:20Z",
          "updatedAt": "2024-10-09T16:00:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOH4FR585-vUUU",
      "title": "Forget about informing the Author of opt-out",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/80",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "There is no protocol interaction between the Author any party.",
      "createdAt": "2024-10-15T22:11:55Z",
      "updatedAt": "2024-10-15T22:39:55Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "bde12c6d217fc3d9107a2b2dda1efbc8bee16e47",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/task-author",
      "headRefOid": "b09516f99e09fec0b29a294348ccbc9464430ce3",
      "closedAt": "2024-10-15T22:39:55Z",
      "mergedAt": "2024-10-15T22:39:55Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "fb16fdd568374e4faf52bd2cde32754fbf00bd86"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586NT5ke",
          "commit": {
            "abbreviatedOid": "b09516f"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T22:26:02Z",
          "updatedAt": "2024-10-15T22:26:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOH4FR585-vU-e",
      "title": "Add back the expiration date to `TaskConfig`",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/81",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "bug",
        "draft-01"
      ],
      "body": "This was erroneously deleted in a prior commit.",
      "createdAt": "2024-10-15T22:14:04Z",
      "updatedAt": "2024-10-15T22:40:09Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "bde12c6d217fc3d9107a2b2dda1efbc8bee16e47",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/task-expiration",
      "headRefOid": "659cf91a7a6a73600444f77b5b0c4e73734aad60",
      "closedAt": "2024-10-15T22:40:09Z",
      "mergedAt": "2024-10-15T22:40:09Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "a4961c7e695f83101b1f894d262b9dc817724bc0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586NT5b8",
          "commit": {
            "abbreviatedOid": "659cf91"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T22:25:27Z",
          "updatedAt": "2024-10-15T22:25:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOH4FR585-vd17",
      "title": "Update query config (*)",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/82",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "Account for the following changes in DAP-12:\r\n\r\n* \"query type\" is now called \"batch mode\"\r\n* `fixed_size` batch mode has been renamed to `leader_selected`\r\n* The `max_batch_query_count` parameter no longer exists\r\n* The `max_batch_size` field for `leader_selected` no longer exists",
      "createdAt": "2024-10-15T22:45:17Z",
      "updatedAt": "2024-10-16T14:47:11Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "a4961c7e695f83101b1f894d262b9dc817724bc0",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/query-type",
      "headRefOid": "a67f00453cc38baab982a5798519d6bae0d411e9",
      "closedAt": "2024-10-16T14:47:11Z",
      "mergedAt": "2024-10-16T14:47:11Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "93298ed62fca5ffa79395ce30573d3cf220f9f3b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586NYdSZ",
          "commit": {
            "abbreviatedOid": "a67f004"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-16T10:37:35Z",
          "updatedAt": "2024-10-16T10:37:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOH4FR585-vr5e",
      "title": "Flesh out IANA considerations and extending taskbind (*)",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/84",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01",
        "wire breaking"
      ],
      "body": "Stacked on #82.\r\nCloses #72.\r\nPartially addresses #34.\r\n\r\n* Ask IANA to register the extension codepoint\r\n* Ask IANA to create a registry for DP mechanisms\r\n* Add guidance for extending taskbind in the future\r\n* Ask IANA to add \"invalidTask\" to the URN sub-namespace for DAP\r\n\r\nWe haven't quite figured out the last of these, so leave it as a TODO.\r\n\r\nFuture documents might extend the batch config, DP config, or VDAF\r\nconfig, so it's helpful if these structures are self-contained. To\r\naccomplish this, move the time precision and min batch size parameters\r\nout of BatchConfig into TaskConfig and move the DP mechnaism and config\r\nout of VdafConfig.",
      "createdAt": "2024-10-15T23:38:52Z",
      "updatedAt": "2024-10-18T21:24:00Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "93298ed62fca5ffa79395ce30573d3cf220f9f3b",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/iana",
      "headRefOid": "618df7de419b336f8106ca4a325744bae4df4741",
      "closedAt": "2024-10-18T21:23:59Z",
      "mergedAt": "2024-10-18T21:23:59Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "ca4edce14124bee6b2333908f8eb321cf4251f83"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586NYdq4",
          "commit": {
            "abbreviatedOid": "f181039"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T10:38:22Z",
          "updatedAt": "2024-10-16T10:38:22Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n(RFC EDITOR: Remove this paragraph.) This draft is maintained in\r\n```",
              "createdAt": "2024-10-16T10:38:22Z",
              "updatedAt": "2024-10-16T10:38:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586NYflV",
          "commit": {
            "abbreviatedOid": "f181039"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "LGTM, one small typo needs fixing",
          "createdAt": "2024-10-16T10:40:59Z",
          "updatedAt": "2024-10-16T10:40:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR586NbykE",
          "commit": {
            "abbreviatedOid": "528150b"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-16T15:29:06Z",
          "updatedAt": "2024-10-16T15:35:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR586Nlr84",
          "commit": {
            "abbreviatedOid": "6cbae13"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-17T14:41:34Z",
          "updatedAt": "2024-10-17T14:41:34Z",
          "comments": [
            {
              "originalPosition": 207,
              "body": "Note that {{!DAP}} defines the registry for batch modes, {{!VDAF}} defines the registry for VDAFs, and this document defines the registry for DP mechanisms.",
              "createdAt": "2024-10-17T14:41:34Z",
              "updatedAt": "2024-10-17T14:41:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOH4FR585_fpQd",
      "title": "Address issue 83 - more bytes for DpMechanism",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/86",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01",
        "wire breaking",
        "interim-2024-10-24"
      ],
      "body": "Closes #83 .",
      "createdAt": "2024-10-22T17:43:48Z",
      "updatedAt": "2024-10-25T14:54:27Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "ca4edce14124bee6b2333908f8eb321cf4251f83",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "junyec/issue-83-dp-codepoint",
      "headRefOid": "e64e80735c43dbea381ec4fa0b7c83c264484966",
      "closedAt": "2024-10-25T14:54:27Z",
      "mergedAt": "2024-10-25T14:54:27Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "eabacecb502930e38d2d7b445daad601e12ac3e0"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "2024/10/24 interim: @junyechen1996 please reduce this from four bytes to two.",
          "createdAt": "2024-10-24T22:06:45Z",
          "updatedAt": "2024-10-24T22:06:45Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "body": "> 2024/10/24 interim: @junyechen1996 please reduce this from four bytes to two.\r\n\r\nUpdated the PR to reflect this^.",
          "createdAt": "2024-10-25T05:19:35Z",
          "updatedAt": "2024-10-25T05:19:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586ON-dc",
          "commit": {
            "abbreviatedOid": "d677933"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-22T18:53:21Z",
          "updatedAt": "2024-10-22T18:53:27Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Can you also make the corresponding change in IANA Considerations? \"one-byte identifier\" -> \"four-byte identifier\"",
              "createdAt": "2024-10-22T18:53:21Z",
              "updatedAt": "2024-10-22T18:53:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586OQGtl",
          "commit": {
            "abbreviatedOid": "35199d4"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-22T23:32:52Z",
          "updatedAt": "2024-10-22T23:32:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR586OxjmC",
          "commit": {
            "abbreviatedOid": "e64e807"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-25T13:48:32Z",
          "updatedAt": "2024-10-25T13:48:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 87,
      "id": "PR_kwDOH4FR585_q0J3",
      "title": "Fix a typo in \"Extending this Document\"",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/87",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01",
        "editorial"
      ],
      "body": "",
      "createdAt": "2024-10-23T19:15:45Z",
      "updatedAt": "2024-10-25T20:18:49Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "ca4edce14124bee6b2333908f8eb321cf4251f83",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/typo",
      "headRefOid": "6a219784634e9c880fcc887f729f3c2d6e2068cc",
      "closedAt": "2024-10-25T20:18:49Z",
      "mergedAt": "2024-10-25T20:18:49Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "e4eb0fb4ebf1471baea4b5e687169ea3ff05cce6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586O1ByG",
          "commit": {
            "abbreviatedOid": "6a21978"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-25T19:44:53Z",
          "updatedAt": "2024-10-25T19:44:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 89,
      "id": "PR_kwDOH4FR585_7h-Q",
      "title": "Add an extension field to `TaskConfig` (*)",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/89",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01",
        "wire breaking"
      ],
      "body": "Closes #85. We'll consider #88 (whether to remove the DP mechanism and suggest implementations do this in an extension) in a future PR.\r\n\r\nNotable features:\r\n\r\n* Create a registry for new taskbind extensions\r\n* Make extensions mandatory-to-implement when provisioning a task\r\n\r\ncc @martinthomson",
      "createdAt": "2024-10-25T16:45:30Z",
      "updatedAt": "2024-10-31T16:36:28Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "e4eb0fb4ebf1471baea4b5e687169ea3ff05cce6",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/85",
      "headRefOid": "92f5c116266e1e4fd51e1c494b3a242e08f87b19",
      "closedAt": "2024-10-31T16:36:27Z",
      "mergedAt": "2024-10-31T16:36:27Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "2ce176644b330b532cda705bac15b38075269717"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Squashed (so that I can start stacking on this PR).",
          "createdAt": "2024-10-30T00:03:18Z",
          "updatedAt": "2024-10-30T00:03:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586O6SDJ",
          "commit": {
            "abbreviatedOid": "f482756"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-27T22:43:12Z",
          "updatedAt": "2024-10-27T22:46:21Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\n    /* The earliest timestamp that will be accepted for this task. */\r\n```",
              "createdAt": "2024-10-27T22:43:12Z",
              "updatedAt": "2024-10-27T22:46:21Z"
            },
            {
              "originalPosition": 31,
              "body": "This smells like an extension to me.",
              "createdAt": "2024-10-27T22:44:04Z",
              "updatedAt": "2024-10-27T22:46:21Z"
            },
            {
              "originalPosition": 72,
              "body": "The question I have is how codepoints here relate to codepoints in DAP, if that makes sense.\r\n\r\nIf I define an extension 0xAAAA here does that match the 0xAAAA codepoint in DAP?",
              "createdAt": "2024-10-27T22:45:53Z",
              "updatedAt": "2024-10-27T22:46:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586O__jb",
          "commit": {
            "abbreviatedOid": "f482756"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T13:50:38Z",
          "updatedAt": "2024-10-28T13:50:38Z",
          "comments": [
            {
              "originalPosition": 111,
              "body": "```suggestion\r\n: Where the mechanism is defined\r\n```",
              "createdAt": "2024-10-28T13:50:38Z",
              "updatedAt": "2024-10-28T13:50:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586PAASz",
          "commit": {
            "abbreviatedOid": "f482756"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T13:51:44Z",
          "updatedAt": "2024-10-28T13:51:45Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "+1",
              "createdAt": "2024-10-28T13:51:45Z",
              "updatedAt": "2024-10-28T13:51:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586PAG2J",
          "commit": {
            "abbreviatedOid": "f482756"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T14:01:13Z",
          "updatedAt": "2024-10-28T14:01:13Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "nit: the doc mentions DAP's ExtensionType which uses 65535, we should make it consistent, probably use 2^16-1 everywhere since that's what the other enum definition uses in this doc.",
              "createdAt": "2024-10-28T14:01:13Z",
              "updatedAt": "2024-10-28T14:01:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586PAj9C",
          "commit": {
            "abbreviatedOid": "588c65e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-28T14:35:32Z",
          "updatedAt": "2024-10-28T14:48:14Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I'm not sure it should be if it's mandatory to implement. In any case, I think we should discuss removing the task_info field in a separate issue.",
              "createdAt": "2024-10-28T14:35:32Z",
              "updatedAt": "2024-10-28T14:48:14Z"
            },
            {
              "originalPosition": 63,
              "body": "Good catch. I went with `2^16-1` to make the draft self-consistent. We wouldn't want to do `66535` because we also have a 32-bit codepoint in the draft.",
              "createdAt": "2024-10-28T14:42:25Z",
              "updatedAt": "2024-10-28T14:48:14Z"
            },
            {
              "originalPosition": 72,
              "body": "The intent is there are two types of extensions:\r\n* DAP report extensions\r\n* taskbind extensions\r\n\r\nFurther, these don't necessarily have anything to with each other. It's up to the document that specifies them. You could, for example, have a document that defines a report extension and taskbind extension that share a codepoint, as long as that codepoint is not allocated in either registry. But there might be cases where we want a taskprov extension but don't need a report extension or vice versa.\r\n\r\nI changed `ExtensionType` in this document to `TaskbindExtensionType` to hopefully make that more clear.\r\n\r\nThis is at least what I was envisioning! Happy to change this in some way if you don't think this is useful.\r\n",
              "createdAt": "2024-10-28T14:45:08Z",
              "updatedAt": "2024-10-28T14:48:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586PMcHr",
          "commit": {
            "abbreviatedOid": "f482756"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T15:55:44Z",
          "updatedAt": "2024-10-29T15:55:44Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "I think this makes sense, do we want to add some text to explain this strategy. I can see this same question coming up in the future.",
              "createdAt": "2024-10-29T15:55:44Z",
              "updatedAt": "2024-10-29T15:55:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586PMc7z",
          "commit": {
            "abbreviatedOid": "588c65e"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.\r\n@cjpatton consider explaining the extension code point strategy in the text (perhaps in the main DAP text and refer to it from here)",
          "createdAt": "2024-10-29T15:56:56Z",
          "updatedAt": "2024-10-29T15:56:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR586PMewK",
          "commit": {
            "abbreviatedOid": "f482756"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T15:59:33Z",
          "updatedAt": "2024-10-29T15:59:33Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Yup, will do.",
              "createdAt": "2024-10-29T15:59:33Z",
              "updatedAt": "2024-10-29T15:59:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586PP0xS",
          "commit": {
            "abbreviatedOid": "588c65e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T23:56:45Z",
          "updatedAt": "2024-10-29T23:56:45Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Done.",
              "createdAt": "2024-10-29T23:56:45Z",
              "updatedAt": "2024-10-29T23:56:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOH4FR586ATvSQ",
      "title": "Remove DP mechanisms (*)",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/90",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01",
        "wire breaking"
      ],
      "body": "Stacked on #89.\r\nCloses #88.\r\n\r\nThis can be expressed as a Taskbind extension.\r\n\r\n",
      "createdAt": "2024-10-30T00:08:19Z",
      "updatedAt": "2024-10-31T16:39:43Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "2ce176644b330b532cda705bac15b38075269717",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/88",
      "headRefOid": "795dc92dfea48d921beb306ef2eb24ebeb938863",
      "closedAt": "2024-10-31T16:39:42Z",
      "mergedAt": "2024-10-31T16:39:42Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "9fda7e2c8f1b1e427bdded8722c5185a5dc6515c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586PTogy",
          "commit": {
            "abbreviatedOid": "e71ed51"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-30T10:14:07Z",
          "updatedAt": "2024-10-30T10:14:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 91,
      "id": "PR_kwDOH4FR586AT5kt",
      "title": "Improve extension points for batch modes and VDAFs (*)",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/91",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01",
        "wire breaking"
      ],
      "body": "Stacked on #90.\r\n\r\nAlong the same lines as\r\nhttps://github.com/ietf-wg-ppm/draft-ietf-ppm-dap/pull/627\r\n\r\nHarmonize the extension points for new batch modes or VDAFs with\r\nTasbind extensions by following the Tag-Length-Value (TLV) pattern. That\r\nis, encode the variant followed by length-prefixed payload, the format\r\nof which is determined by the variant. This is inteded to make it easier\r\nto extend the document in the future.\r\n\r\nThis change also has a couple of bug fixes:\r\n\r\n* Fix encoding of Prio3Sum config (the circuit now requires a maximum\r\n  measurement rather than the bit length of the maximum measurement).\r\n* Add encoding for Prio3MultihotCountVec\r\n\ufeff\ufeff",
      "createdAt": "2024-10-30T01:00:41Z",
      "updatedAt": "2024-10-31T16:42:15Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "9fda7e2c8f1b1e427bdded8722c5185a5dc6515c",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/vdaf-batch-mode",
      "headRefOid": "fc11d94dd3c06daed2910857798729d9fdd9f68c",
      "closedAt": "2024-10-31T16:42:15Z",
      "mergedAt": "2024-10-31T16:42:15Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "8dd676315c60f8ab4e73bf6bcd4272c599a1e04e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586PQC6y",
          "commit": {
            "abbreviatedOid": "4e03a01"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-30T01:08:28Z",
          "updatedAt": "2024-10-30T01:08:28Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "This change is the main pay off of this PR. \"Extend the `VdafConfig` structure\" is not very well defined.",
              "createdAt": "2024-10-30T01:08:28Z",
              "updatedAt": "2024-10-30T01:08:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586PT7Qu",
          "commit": {
            "abbreviatedOid": "4e03a01"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-30T10:36:16Z",
          "updatedAt": "2024-10-30T10:36:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOH4FR586PY2j3",
          "commit": {
            "abbreviatedOid": "4e03a01"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-30T17:00:55Z",
          "updatedAt": "2024-10-30T17:00:58Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "So do we have any language on what if `batch_mode` or `vdaf_type` is unrecognized by an aggregator? (which is the initial motivation to make `vdaf_config` an opaque)",
              "createdAt": "2024-10-30T17:00:55Z",
              "updatedAt": "2024-10-30T17:00:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586Pjwzn",
          "commit": {
            "abbreviatedOid": "fc11d94"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-31T16:41:59Z",
          "updatedAt": "2024-10-31T16:41:59Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Yes, if not recognized then the party MUST opt out.",
              "createdAt": "2024-10-31T16:41:59Z",
              "updatedAt": "2024-10-31T16:41:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOH4FR586AawXi",
      "title": "Prepare to cut draft 01",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/93",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "draft-01"
      ],
      "body": "Stacked on #91.\r\n\r\n* Pass of draft:\r\n  * Update section references.\r\n  * Improve precision of terminology.\r\n  * Remove the \"Supporting HPKE Configurations Independent of Tasks\" section. This is no longer relevant since we removed support of per-task HPKE configs in DAP draft 12.\r\n  * Fix a few typos and minor grammar issues.\r\n  * In Security Considerations we recommend digitally signing the task config; mention that we can do this with a Taskbind extension.\r\n* Add a change log.\r\n* Bump base drafts.\r\n",
      "createdAt": "2024-10-30T17:02:43Z",
      "updatedAt": "2024-11-03T00:31:17Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "8dd676315c60f8ab4e73bf6bcd4272c599a1e04e",
      "headRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "headRefName": "cjpatton/draft-01",
      "headRefOid": "5a8ec66e70f32d92f3493c167237b8cff2f7bf75",
      "closedAt": "2024-11-03T00:31:17Z",
      "mergedAt": "2024-11-03T00:31:16Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "60f6f491714f9074d1924b12fd56d4e72ff7cff8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOH4FR586PY5hZ",
          "commit": {
            "abbreviatedOid": "f0b0df1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-30T17:04:40Z",
          "updatedAt": "2024-10-30T17:04:41Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This draft doesn't exist. Once the draft is published, the build should pass.\r\n\r\nLikewise for {{!VDAF}}.",
              "createdAt": "2024-10-30T17:04:41Z",
              "updatedAt": "2024-10-30T17:04:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586PY7z0",
          "commit": {
            "abbreviatedOid": "f0b0df1"
          },
          "author": "junyechen1996",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-30T17:07:14Z",
          "updatedAt": "2024-10-30T17:34:30Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": "```suggestion\r\njob and when it requests the Heolper's aggregate share during a collection job.\r\n```",
              "createdAt": "2024-10-30T17:07:14Z",
              "updatedAt": "2024-10-30T17:34:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOH4FR586Pmfun",
          "commit": {
            "abbreviatedOid": "5a8ec66"
          },
          "author": "wangshan",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-10-31T23:00:12Z",
          "updatedAt": "2024-10-31T23:00:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 95,
      "id": "PR_kwDOH4FR586CwBJL",
      "title": "Tweak lower bounds on field lengths to 0 instead of 1.",
      "url": "https://github.com/ietf-wg-ppm/draft-ietf-ppm-dap-taskprov/pull/95",
      "state": "OPEN",
      "author": "branlwyd",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Both of the relevant fields can include zero-length values in some cases, so this change is required for taskprov to be implementable (while still following the specification).\r\n\r\nAlso, clean up a comment typo.",
      "createdAt": "2024-11-22T02:03:56Z",
      "updatedAt": "2024-11-22T02:03:57Z",
      "baseRepository": "ietf-wg-ppm/draft-ietf-ppm-dap-taskprov",
      "baseRefName": "main",
      "baseRefOid": "60f6f491714f9074d1924b12fd56d4e72ff7cff8",
      "headRepository": "branlwyd/draft-ietf-ppm-dap-taskprov",
      "headRefName": "bran/editorial",
      "headRefOid": "32d0c001fc863fe22e1be6d70bf9b922d55ca9cb",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}